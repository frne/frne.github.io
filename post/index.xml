<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Franks.codes</title>
    <link>https://frne.github.io/post/</link>
    <description>Recent content in Posts on Franks.codes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 02 Mar 2018 19:15:03 +0100</lastBuildDate>
    
	<atom:link href="https://frne.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Shapeless for Data Cleaning in Apache Spark</title>
      <link>https://frne.github.io/post/2017-12-14-generic-derivation-for-spark-data-cleaning/</link>
      <pubDate>Fri, 02 Mar 2018 19:15:03 +0100</pubDate>
      
      <guid>https://frne.github.io/post/2017-12-14-generic-derivation-for-spark-data-cleaning/</guid>
      <description>When it comes to importing data into a BigData infrastructure like Hadoop, Apache Spark is one of the most used tools for ETL jobs. Because input data &amp;ndash; in this case CSV &amp;ndash; has often invalid values, a data cleaning layer is needed. Most tasks in data cleaning are very specific and therefore need to be implemented depending on your data, but some tasks can be generalized. In this post, I&amp;rsquo;ll not go into Spark, ETL or BigData in general, but provide one approach to clean null / empty values off a data set.</description>
    </item>
    
    <item>
      <title>Slides: Principles of Object Orientation</title>
      <link>https://frne.github.io/post/2016-05-15-slides-principles-of-object-orientation/</link>
      <pubDate>Sun, 15 May 2016 10:27:49 +0200</pubDate>
      
      <guid>https://frne.github.io/post/2016-05-15-slides-principles-of-object-orientation/</guid>
      <description>Some time ago, in school, there was a somehow funny situation: The prof was talking about object orientation and patterns. He came up with SRP but left out some important others. I asked if we will talk about all GRASP and SOLID principles, because in my personal opinion, they are part of &amp;ldquo;the basics&amp;rdquo;.
His answer was not what is was expecting&amp;hellip; He told me to prepare a talk about those principles in front of the class.</description>
    </item>
    
    <item>
      <title>New Blog</title>
      <link>https://frne.github.io/post/2016-05-12-new-blog/</link>
      <pubDate>Thu, 12 May 2016 14:38:12 +0200</pubDate>
      
      <guid>https://frne.github.io/post/2016-05-12-new-blog/</guid>
      <description>You may have noticed, that I had not much time to blog about something in the past months&amp;hellip; One thing was, that we all need money, so I had to work very much. And as some of you know, I&amp;rsquo;m also studying in the evenings.
Long story short, I&amp;rsquo;ve restarted blogging with a new engine and new design once again. Key is (not just to use new swag), to simplify blogging for me, so I can put more time in the articles and less in managing the blog itself.</description>
    </item>
    
    <item>
      <title>Play Framework Actor Pooling with Guice (Java)</title>
      <link>https://frne.github.io/post/2016-05-02-play-guice-actor-pooling/</link>
      <pubDate>Mon, 02 May 2016 23:11:01 +0200</pubDate>
      
      <guid>https://frne.github.io/post/2016-05-02-play-guice-actor-pooling/</guid>
      <description>Working with the Play! Framework means working with Akka, intentionally or not. But working with Akka Actors can be tricky, especially when it comes to dependency injection. Play! 2.4 uses Google&amp;rsquo;s Guice for DI and of course it has the ability to also bind Actors so an ActorRef can be injected anywhere.
Single Actor DI Biding and injecting one single Actor is simple and well documented . Just bind it in a Module:</description>
    </item>
    
    <item>
      <title>Scala Compiler Tuning</title>
      <link>https://frne.github.io/post/2016-04-15-scala-compiler-tuning/</link>
      <pubDate>Fri, 15 Apr 2016 22:15:28 +0200</pubDate>
      
      <guid>https://frne.github.io/post/2016-04-15-scala-compiler-tuning/</guid>
      <description>As my Scala projects go on, I want to share some compiler configuration and tricks with you, which I use on many projects. Some tiny configuration options can greatly improve your code and warn you about things, you would probably never discover.
Basically, you can pass compiler options to scalac using console arguments:
$ scalac -deprecation -unchecked -Xlint something.scala If you are using SBT, it&amp;rsquo;s even simpler&amp;hellip; You can just use the following configurations snippet in your build.</description>
    </item>
    
    <item>
      <title>Understanding Stemmers (Natural Language Processing)</title>
      <link>https://frne.github.io/post/2015-07-23-understanding-stemmers-nlp/</link>
      <pubDate>Thu, 23 Jul 2015 18:05:12 +0200</pubDate>
      
      <guid>https://frne.github.io/post/2015-07-23-understanding-stemmers-nlp/</guid>
      <description>I am interested in NLP and have already some experience with Apache Solr. It&amp;rsquo;s time to dig a little in-deep regarding stemmers. First of all, I was looking for a general definition of what a stemmer is, and I found this one, which IMHO is quite good:
 stemmer &amp;mdash; an algorithm for removing inflectional and derivational endings in order to reduce word forms to a common stem
 So what a stemmer does is nothing more, than converting words to their word stem.</description>
    </item>
    
    <item>
      <title>If pragmatism raises technical debt, call it oversimplification (rant)</title>
      <link>https://frne.github.io/post/2015-04-21-pragmatism-technical-dept-oversimplification/</link>
      <pubDate>Tue, 21 Apr 2015 13:09:32 +0200</pubDate>
      
      <guid>https://frne.github.io/post/2015-04-21-pragmatism-technical-dept-oversimplification/</guid>
      <description>The word &amp;ldquo;pragmatism&amp;rdquo; or &amp;ldquo;pragmatic&amp;rdquo; is, in my personal opinion, the most overrated word in agile development. Many people use this as a buzzword without knowing what it means. I hear people saying &amp;ldquo;He solved that complex problem in half an hour, he&amp;rsquo;s so pragmatic!&amp;rdquo; and think for myself &amp;ldquo;Yeah, but that &amp;lsquo;solution&amp;rsquo; probably causes other devs three times more effort than a sustainable solution would take.&amp;rdquo;
Okay, but that&amp;rsquo;s only my anger speaking.</description>
    </item>
    
  </channel>
</rss>