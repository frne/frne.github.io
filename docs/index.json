



































































































[{"categories":["Architecture"],"contents":"In enterprise \u0026amp; solution architecture, connecting boxes with arrows is an often used and overrated visualization from high-level, thru component architecture, down to data and class diagrams. However, to create a holistic view on systems, component diagrams are not enough! When it comes to analysis or transformation of a high-level application- or service-architecture, I prefer to draw an Application Landscape Diagram, which I would like to show and elaborate on in this post.\nDefinition \u0026amp; Dimensions Template file with highlighted dimensions The template shown above is a simple matrix with two dimensions. Later, more will be added, but first, it is crucial to understand or define the X and Y dimensions. In a detailed design, the diagram can be used in different ways, and everyone working on it should have a common understanding of the taxonomies.\nProducts The vertical columns (blue) visualize products or services. Some say business lines, for SaaS platforms, for example, it makes sense to talk about applications or modules. For architects or consultants the term \u0026ldquo;services\u0026rdquo; would probably be more appropriate\u0026hellip; Whatever the dimension is called, it should be an explicit name and all stakeholders should understand it the same way.\nWhile we should try to keep products as high-level as possible, overgeneralization makes no sense at this point. In the later application, we want to find out how similar products differ technologically. You only have one product? That\u0026rsquo;s rarely the case. You can use customer segmentation here or differentiate by legacy and follow-up implementation.\nMy recommendation here is to start broadly and then gradually eliminate intermediate layers.\nFunctions The horizontal rows (green) denote functions, some say features, components or modules. With the last term \u0026ldquo;modules\u0026rdquo; something becomes very clear: Explicit wording is indispensable because otherwise, there is room for interpretation whether e.g. \u0026ldquo;module\u0026rdquo; means a product or a function.\nWhile there is general functionality used in and by most companies (e.g. IAM, CRM, ERP), this can also be branch-typical or specialized functions that are needed or shared across products. Examples could be PIM and payment gateway for commerce platforms, hardware-control software for some industry segments or dispatching applications for service \u0026amp; delivery companies.\nWhile I personally don\u0026rsquo;t recommend this, some use the 12 application factors here as a general-purpose solution. I appreciate the 12 factors concept, but for this purpose, they are overgeneralized and in the same time, too technical to generate real value.\nColor Codes While color codes can be used for very different aspects, I often prefer them to indicate the level of customization for each application. Custom or customized applications are not bad by default but often pose an architectural difficulty or risk in terms of maintainability, testing, and extension. I therefore use blue for standard software, yellow for standard software with integrations or customizations, and red for entirely custom development.\nVisual Conclusions Once you have defined and agreed on the dimensions and their naming, the chart can be filled with the corresponding solutions, technology, applications, or providers. The process is rather simple: For each solution or technology in place, a box (colored) is created. The boxes are connected where technologies or implementations span multiple applications, functions, or both. Since the order of products (left to right) or functions (top to bottom) has no purpose, the rows and columns should be arranged so that as many commonalities as possible can be visually represented.\nBecause I\u0026rsquo;m sadly not able to provide a real-world example due to data protection and NDA, the following constructed situation should serve as an example. All products, suppliers, and brands mentioned in the diagram serve the sole purpose of illustrating an example. I am, however, not affiliated with any of these companies or brands.\nFilled example chart of a constructed digital environment Looking at the diagram above, we\u0026rsquo;re able almost instantly to draw spontaneous conclusions and improvements to the overall architecture:\nUnified IAM Filled example chart of a constructed digital environment It is almost impossible to overlook the fact that identity and access management have been set up separately for each product. Centralizing the IAM infrastructure is an obvious solution, as it not only saves costs but also creates a uniform user base.\nDatabase \u0026amp; Provider Fragmentation Filled example chart of a constructed digital environment We use the same database technology in the three columns on the right but with different managed providers. Unifying the providers would be potentially easy to realize and could save maintenance as well as administration effort. Also, the Postgres instance on the left could potentially be integrated and migrated into one single database provider.\nShared Hosting Platform Filled example chart of a constructed digital environment As some of the products use different shared hosting platforms to provide their services, they could be unified into one. Taking the CloudFlare CDN / caching layer into account, one could even consider providing and delivering the application directly on the edge of the CDN, so the whole annotated area could be served by one single provider.\nTools Depending on the tool used, this can take some serious time. Even if I am a friend of whiteboards or pen \u0026amp; paper, I really recommend to work with a digital tool to be agile and to ensure traceability.\nAs one can see from the images, I obviously used a simple spreadsheet (in this case Google Sheets) but Excel or Open Office Calc would be equally sufficient. If spreadsheets are too old-fashioned, or you just want to be more creative, Miro or literally every \u0026ldquo;digital piece of canvas\u0026rdquo; is a good alternative. Also, depending on the company and customer, there\u0026rsquo;s probably an enterprise architecture tool in place. Most of them should provide similar capabilities.\nClosing Words Please keep in mind, especially business people, that this is only a visualization technique. It doesn\u0026rsquo;t replace skilled and experienced solution architects, but probably helps them to analyze or communicate more efficiently.\nAlthough the principle and the document look very simple, the technique works even for large corporate organizations. I actually have customers who have such diagrams printed on posters on the office wall. However, as with all architecture and transformation processes, the application landscape should not be a one-off initiative. The technology only offers real added value, when the status quo is continuously analyzed and improved. Last but not least, the chart is suitable for visually comparing the current with the target situation and deriving architecture initiatives from this. Once an initiative is done, don\u0026rsquo;t forget to update the chart.\n","date":"13 Oct, 2023","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cpicture\u003e\n  \u003csource srcset=\"/images/post/2023-10-14-how-to-effectively-visualize-application-landscape-enterprise-architecture/header_huc8e9e34735df232f6c00087be36dd649_153931_545x0_resize_q95_h2_box_3.webp\" media=\"(max-width: 575px)\"\u003e\n  \u003csource srcset=\"/images/post/2023-10-14-how-to-effectively-visualize-application-landscape-enterprise-architecture/header_huc8e9e34735df232f6c00087be36dd649_153931_600x0_resize_q95_h2_box_3.webp\" media=\"(max-width: 767px)\"\u003e\n  \u003csource srcset=\"/images/post/2023-10-14-how-to-effectively-visualize-application-landscape-enterprise-architecture/header_huc8e9e34735df232f6c00087be36dd649_153931_700x0_resize_q95_h2_box_3.webp\" media=\"(max-width: 991px)\"\u003e\n  \u003csource srcset=\"/images/post/2023-10-14-how-to-effectively-visualize-application-landscape-enterprise-architecture/header_huc8e9e34735df232f6c00087be36dd649_153931_1110x0_resize_q95_h2_box_3.webp\"\u003e\n  \u003cimg loading=\"lazy\" decoding=\"async\" class=\"w-100 img-fluid rounded\" src=\"/images/post/2023-10-14-how-to-effectively-visualize-application-landscape-enterprise-architecture/header_huc8e9e34735df232f6c00087be36dd649_153931_1110x0_resize_box_3.png\" alt=\"\" width=\"1110\" height=\"572\"\u003e\n\u003c/picture\u003e\n \n \n \n\n","permalink":"https://www.frankneff.com/blog/2023-10-14-how-to-effectively-visualize-application-landscape-enterprise-architecture/","tags":["enterprise","architecture","visualization","systems"],"title":"How to effectively visualize an Application Landscape in Enterprise Architecture"},{"categories":["Architecture","Security"],"contents":"While OIDC and OAUTH are well-known standards, they don\u0026rsquo;t fit every purpose \u0026ldquo;out of the box.\u0026rdquo; In businesses with special regulations like banking, health care, etc., non-functional requirements to auth can be challenging. Different solutions and ways were evaluated to create a new identity provider for a medical network. The first approach was \u0026ldquo;just\u0026rdquo; using simple OAUTH by its most famous Authorization Code Flow. Of course, it failed fast, and I\u0026rsquo;ll show why and how we solved it in this post.\nThe Challenge While re-architecting and (partially) rebuilding a healthcare-related platform, the identity layer was one of the central components we wanted to work on first. While an identity provider has always been there, the platform developed the need to add features and provide (token-based) access to third parties. As the project was an integration case with dozens of clients providing and consuming data, not only security and performance but also adoption by implementers was crucial. The most straightforward solution came up reasonably quickly:\n\u0026ldquo;Let\u0026rsquo;s just do OAUTH! It\u0026rsquo;s easy \u0026amp; secure, everyone knows it.\u0026rdquo;\nAfter architecting and implementing a PoC, we tested auth \u0026amp; integration with a client and gave it an internal security audit. As the solution should be \u0026ldquo;straightforward\u0026rdquo; to all involved parties, we used Implicit Flow for our own frontends and Authorization Code Flow for all backend clients, including external ones.\nWrong Assumptions While this worked for all internal needs, we immediately faced a massive architectural flaw. We implicitly anticipated that all clients:\nAre browser-based tools Are hosted on a central server (SaaS) Assumed high-level architecture of the authentication flow (source) Of course, both assumptions were dead wrong. On the one hand, many clients were isolated \u0026ldquo;fat clients\u0026rdquo; running locally on PCs. While they had an internet connection and could communicate with HTTP APIs, they struggled to open browser windows / redirect clients to web endpoints. But there was another, way more significant challenge, which lies in the deployment model of many healthcare SaaS providers:\nNowhere to Redirect Especially in high-security environments like health care, where one needs to process highly protected patient data, tenant isolation is often done on a physical or instance level. This is contrary to SaaS, where we mostly have one big application that supports multi-tenancy and is centrally hosted. The majority of healthcare software suites, even if they\u0026rsquo;re web-based, are hosted within the healthcare facility or an IT partner, using one isolated instance per tenant on their own machine with their dedicated database.\nReality high-level architecture \u0026amp; caveats (source) In this area (A) we have to deal with all sorts of security mechanisms like network access control, firewalling, isolation, IDS/IPS, and many more, which we cannot anticipate. Some minor, self-operated instances (C) even used a regular consumer DSL router with a dynamic IP. Finally, we needed to accept that those systems could talk to us, but we could not talk to them, which left us, at least for the very common flows, with a huge issue:\nWe can not work with redirects or basically any mechanism which implies bidirectional communication.\nOn OAUTH Flows The latter implication becomes effective when considering how the OAUTH Authorization Code Flow is designed. In a simple scenario, the unauthenticated user needs to complete the following steps to obtain an access token:\nUser gets redirected from the original application UI to a login screen on the identity provider User logs in (and accepts scopes needed by the original application) User is redirected back to the original application URL, provided by the redirect_uri parameter supplied with the first call To that redirect URI, a short-lived auth token is appended and with this supplied to the client The client requests an access token by supplying the before-mentioned auth token, client id and secret to the IDP The IDP issues the access token to the client With the implications mentioned, this flow became impossible because the clients have no URI to redirect to. In fact, that flow implies that all clients have a public URL to redirect to.\nWe looked at other well-known flows and came to the following conclusions:\nImplicit Flow doesn\u0026rsquo;t work because it is for frontends only and also works with redirects (same problem) Resource Owner Password Credentials Flow would technically have been an option but could not be used for data security reasons. In fact, the users should not enter their credentials in any form but our own IDP by policy, which eliminated this option. Client Credentials Flow also couldn\u0026rsquo;t be used because the client is not the resource owner and, therefore, potentially untrusted unless authorized by the resource owner by client consent. The OAuth 2.0 Device Code Flow Have you ever set up a device like a smart tv, set-top box, etc., where you needed to log in using your smartphone or browser and then enter a 4 to 6-digit code or scan a QR code that was shown on the device? That\u0026rsquo;s a Device Code Flow. It\u0026rsquo;s actually designed to authenticate devices that are not fully capable of executing the other flows.\nGitHubs device code auth screen as used for GitHub CLI (source) By using this lesser-known OAUTH flow, we were actually able to work around the missing / distributed redirect URI problem because all calls made are directed from the client to IDP, but not vice versa. Also, no redirects are used, as explained in the following simplified scenario:\nClient sends a Device Authorization Request to the IDP, containing the client_id and optionally a scope IDP responds with a Device Authorization Response, containing device_code, user_code and verification_uri The user_code and verification_uri need to be presented to the user in some way by the client Finally, the client requests a Device Access Token from the IDP by sending grant_type, device_code and client_id to the IDP The IDP responds either with a Device Access Token or one of the errors authorization_pending, slow_down, access_denied or expired_token, which are specific for device code auth. On authorization_pending, the user has not yet completed the flow; steps 4 \u0026amp; 5 should be repeated after some waiting time. A more detailed explanation of the flow, incl. examples, can be found at the IETF RFC-8629 about the OAuth 2.0 Device Authorization Grant.\nConvenience Measures For the convenience of the user, we added mechanisms to make the code auth (typing or copying a code) as painless as possible. While some clients relied on the \u0026ldquo;hard way\u0026rdquo; because they could not open a browser, most could. Therefore, We have suggested that most clients open the URL with the code attached as a parameter directly in a browser instead of instructing the user to use another device. Like that, no code needs to be typed or copied.\nIn addition, we enabled refresh tokens to be issued. Using those additionally granted, long-lived tokens and the client secret, clients can extend or re-issue access tokens without redoing a full Device Code Flow. If well-implemented, the user only needs to log in once using their browser and is authenticated automatically afterwords. From a useability perspective, this feels the same as an Authorization Code Flow but doesn\u0026rsquo;t need a redirect URI and adds a convenient fallback solution for less tightly integrated clients.\nAdded security with mTLS To add an extra layer of security, mutual TLS by using client-side X509 certificates was evaluated and planned. As the correct and secure implementation of mTLS can become complex to impossible for some clients, especially when dealing with legacy software \u0026amp; and security mechanisms, the solution has been planned and rolled out as an additional measure and not as a hard technical requirement.\nThe majority of all clients adopted the solution, including mTLS, or otherwise added different additional security measures on their side.\n","date":"11 Sep, 2023","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cpicture\u003e\n  \u003csource srcset=\"/images/post/2023-09-11-securing-isolated-systems-caveats-of-plain-oauth-flows-how-to-solve/header_hu16438d4256b0c2890b815519806030d7_1095994_545x0_resize_q95_h2_box_3.webp\" media=\"(max-width: 575px)\"\u003e\n  \u003csource srcset=\"/images/post/2023-09-11-securing-isolated-systems-caveats-of-plain-oauth-flows-how-to-solve/header_hu16438d4256b0c2890b815519806030d7_1095994_600x0_resize_q95_h2_box_3.webp\" media=\"(max-width: 767px)\"\u003e\n  \u003csource srcset=\"/images/post/2023-09-11-securing-isolated-systems-caveats-of-plain-oauth-flows-how-to-solve/header_hu16438d4256b0c2890b815519806030d7_1095994_700x0_resize_q95_h2_box_3.webp\" media=\"(max-width: 991px)\"\u003e\n  \u003csource srcset=\"/images/post/2023-09-11-securing-isolated-systems-caveats-of-plain-oauth-flows-how-to-solve/header_hu16438d4256b0c2890b815519806030d7_1095994_1110x0_resize_q95_h2_box_3.webp\"\u003e\n  \u003cimg loading=\"lazy\" decoding=\"async\" class=\"w-100 img-fluid rounded\" src=\"/images/post/2023-09-11-securing-isolated-systems-caveats-of-plain-oauth-flows-how-to-solve/header_hu16438d4256b0c2890b815519806030d7_1095994_1110x0_resize_box_3.png\" alt=\"\" width=\"1110\" height=\"572\"\u003e\n\u003c/picture\u003e\n \n \n \n\n","permalink":"https://www.frankneff.com/blog/2023-09-11-securing-isolated-systems-caveats-of-plain-oauth-flows-how-to-solve/","tags":["oauth","oidc","security","authentication","authorization","architecture"],"title":"Securing isolated systems: Caveats of using plain OAUTH flows and how to solve them"},{"categories":["Education"],"contents":"Als Teil des Leistungsnachweises meiner Weiterbildung CAS IT Management und Agile Transformation an der Hochschule Luzern schreibe ich eine Arbeit über den Erfolg der Digitalisierung in der Schweizer Gesundheitsbranche in Form eines Blogposts. Teil der Arbeit ist eine quantitative Studie in Form einer Umfrage an Fachpersonen, Manager und Entscheider in der Schweizer Gesundheitsbranche zum Thema.\nDie Umfrage ist online und anonym. Teilnehmende haben die Möglichkeit, die vollständigen erhobenen Daten zur eigenen Verwendung zu erhalten.\nFalls die eingebettete Umfrage unten auf ihrem Gerät nicht korrekt angezeigt wird, können Sie diese unter folgendem Link direkt öffnen: https://forms.gle/ngKfn2nfeenjyRpq7\nDanke für Ihre Teilnahme.\nWird geladen…","date":"07 May, 2022","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cpicture\u003e\n  \u003csource srcset=\"/images/post/2022-05-07-umfrage_digitalisierung_gesundheit_hu4164209bef11d723c5c8dcc0112dc7dd_130500_545x0_resize_q95_h2_box_3.webp\" media=\"(max-width: 575px)\"\u003e\n  \u003csource srcset=\"/images/post/2022-05-07-umfrage_digitalisierung_gesundheit_hu4164209bef11d723c5c8dcc0112dc7dd_130500_600x0_resize_q95_h2_box_3.webp\" media=\"(max-width: 767px)\"\u003e\n  \u003csource srcset=\"/images/post/2022-05-07-umfrage_digitalisierung_gesundheit_hu4164209bef11d723c5c8dcc0112dc7dd_130500_700x0_resize_q95_h2_box_3.webp\" media=\"(max-width: 991px)\"\u003e\n  \u003csource srcset=\"/images/post/2022-05-07-umfrage_digitalisierung_gesundheit_hu4164209bef11d723c5c8dcc0112dc7dd_130500_1110x0_resize_q95_h2_box_3.webp\"\u003e\n  \u003cimg loading=\"lazy\" decoding=\"async\" class=\"w-100 img-fluid rounded\" src=\"/images/post/2022-05-07-umfrage_digitalisierung_gesundheit_hu4164209bef11d723c5c8dcc0112dc7dd_130500_1110x0_resize_box_3.png\" alt=\"\" width=\"1110\" height=\"569\"\u003e\n\u003c/picture\u003e\n \n \n \n\n","permalink":"https://www.frankneff.com/blog/2022-05-07-umfrage_erfolg_digitalisierung_schweizer_gesundheit/","tags":["studie","german"],"title":"Umfrage: Erfolg der Digitalisierung in der Schweizer Gesundheitsbranche"},{"categories":["Education"],"contents":"We have a massive skills shortage in IT, especially in development. A natural effect of this is that there are many career changers and, as a result, alternative educational opportunities. These alternatives, mostly YouTube video courses and other online offerings, are good knowledge brokers but have downsides. Especially in such a knowledge-driven environment, scientific methods are more important than entertaining course design.\nThe Content Revolution First of all, I want to express that I find the information available online a super achievement. I would have loved to have had these opportunities during my education with YouTube, Udemy, Coursera, and the like. No, of course, I\u0026rsquo;m not that old yet. The internet existed, and there was a lot of information available, but in no comparison to today. You read books about programming languages and frameworks. StackOverflow was emerging. The primary source of information on libraries and frameworks was the documentation or their source code.\nThe content revolution changed that. There is not just one but many videos, online training, and courses on every topic. Much of it is, unfortunately, garbage. That\u0026rsquo;s the Internet, and it used to be that way. What has changed is the offer, presentation in the media, and of course, the acceptance in the industry. Today, many people equate online courses with academic or practical training, which I find questionable in some cases.\nSo I need to Study? No. I don\u0026rsquo;t believe that a degree is mandatory for a software developer. Also, little knowledge that can actually be applied in practice is imparted in foundational studies:\n\u0026ldquo;Most graduates cannot program yet\u0026rdquo;\nBut, a degree in information science, ICT, or any other engineering science is a school of thought. You learn how to obtain, validate, evaluate, and adequately use information. Unfortunately, the scientific approach is not taught in any (or very few) online videos, even though it is the foundation for fact-based learning:\n\u0026ldquo;Most graduates know how to learn programming\u0026rdquo;\nPersonally, my studies helped me understand how to learn and use information efficiently. The main asset was not knowledge, but methodology. I can recommend at least an undergraduate degree (in any science or engineering discipline) to anyone to take this approach with them.\nA Scientific Approach If you want to learn programming to work with it professionally, start with the basics: The scientific method of work. Of course, it\u0026rsquo;s not as much fun as just coding something quickly, but it\u0026rsquo;s a long-term investment in your future and everything you learn.\n\u0026ldquo;Because some guy on YouTube said so\u0026rdquo; is not an argument!\nFor this very reason: Research information from different sources of various authors. Learning videos are good, but only the beginning. Study the material, and look for criticism of the methods you have learned. Try them out. Read documentation and code. Check and question statements made and validate if a specific content actually contributes to solving the problem you want to solve. Lastly, don\u0026rsquo;t use or even introduce technology, just because it\u0026rsquo;s cool. The latter is, in my personal opinion, a bold issue in many development teams.\nFinal Thoughts I thought about linking a pragmatic YouTube video about the scientific method for a long time. There are many excellent videos about it. But I decided not to link one directly but let you do your own research instead. For reference purposes, however, here is the Wikipedia article on the subject:\nScientific method on Wikipedia.com\nDon\u0026rsquo;t be a blind follower, and above all, don\u0026rsquo;t help spread false or insufficient information.\n","date":"06 May, 2022","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cpicture\u003e\n  \u003csource srcset=\"/images/post/2022-05-07-online-courses-critical-view_huacd031072ae503216c653a865859effe_91001_545x0_resize_q95_h2_box.webp\" media=\"(max-width: 575px)\"\u003e\n  \u003csource srcset=\"/images/post/2022-05-07-online-courses-critical-view_huacd031072ae503216c653a865859effe_91001_600x0_resize_q95_h2_box.webp\" media=\"(max-width: 767px)\"\u003e\n  \u003csource srcset=\"/images/post/2022-05-07-online-courses-critical-view_huacd031072ae503216c653a865859effe_91001_700x0_resize_q95_h2_box.webp\" media=\"(max-width: 991px)\"\u003e\n  \u003csource srcset=\"/images/post/2022-05-07-online-courses-critical-view_huacd031072ae503216c653a865859effe_91001_1110x0_resize_q95_h2_box.webp\"\u003e\n  \u003cimg loading=\"lazy\" decoding=\"async\" class=\"w-100 img-fluid rounded\" src=\"/images/post/2022-05-07-online-courses-critical-view_huacd031072ae503216c653a865859effe_91001_1110x0_resize_q95_box.jpg\" alt=\"\" width=\"1110\" height=\"572\"\u003e\n\u003c/picture\u003e\n \n \n \n\n","permalink":"https://www.frankneff.com/blog/2022-05-06-online-courses-for-developers-a-slightly-more-critical-view/","tags":["knowledge","training","career","engineering"],"title":"Online Courses for Developers - A slightly more Critical View"},{"categories":["Engineering Teams","Hiring Devs"],"contents":"When it comes to developer maturity, I heard many tech recruiters and decision-makers saying: \u0026ldquo;We should only hire senior devs.\u0026rdquo; This may be justified in some situations, projects, or teams, but I do not accept this statement as a general premise. In this blog post, I want to highlight the benefits that juniors can bring to the team and encourage you to find and foster new talent actively.\nFirst, I would like to emphasize that developer maturity is extremely difficult to evaluate. I even wrote a blog post in this series about why I find the \u0026ldquo;senior\u0026rdquo; term in software development paradoxical:\nHiring Devs - The Seniority Paradox\nThe not so small Differences I see a lot of added value in junior developers in addition to the challenges, but they are just as difficult to generalize. Therefore, I will first try to roughly point out some categorical differences between junior and senior developers and then detail individual ones.\nOf course, these assumptions are purely based on personal experience and therefore not backed by relevant data.\nTopic Senior Junior Knowledge Has historic knowledge, which\nmight be outdated or wrong Has recent knowledge which might be\nincomplete or wrong Leadership Need less leadership, but motivation Needs more leadership, but is\nmore likely to be intrinsically motivated Mentoring Needs inspiration Needs training Salary High Low Social Often more for themselves, prefer\ntechnical challenges over team effort Oftem more social and team-driven Fluctuation Likely to quit for a higher-paid job,\nor to improve career Likely to leave for a higher-paid job or\nto learn something new Knowledge I have often caught myself thinking that seniors are generally better qualified than juniors. I found out that this is not true for several reasons:\nIt depends hugely on the tasks for which you are hiring a developer. To design software architecture, tinker with a UI, or implement CRUD controllers. Some tasks require academic and/or empirical knowledge, which can only be gained through time and experience. But by far, not all jobs of a developer require that. So you should ask yourself \u0026ldquo;for which task\u0026rdquo; you are looking for someone even before writing the job posting.\nOften it takes more creativity than knowledge, and especially in fast-moving disciplines like software development, data science, etc., historical knowledge can even be a disadvantage. Primarily, the term \u0026ldquo;X years of experience with Y\u0026rdquo; is obsolete nowadays. Tendentially, 80% of this experience has already become irrelevant. In the worst case, without the candidate being aware of it. In this case, you may hire people who bring outdated knowledge to a team that makes wrong decisions based on it.\nLast but not least, one should always consider the actuality of the knowledge, regardless of the candidate\u0026rsquo;s experience. While this is often difficult, IMO there is a tendency for juniors to have less in-depth but more current expertise in their field.\nA different Approach Most likely, every developer knows: Sometimes, you need a totally different approach, not only a better understanding of the matter. This is already summing it up precisely. Having a mix of experience people with empiric knowledge and curious ones with more current expertise makes your team way more efficient than having \u0026ldquo;only experts.\u0026rdquo; Sometimes, even a total senior finds a solution herself by explaining the matter to a junior, which happened to me personally on both sides of the dialogue.\nOf course, leadership and mentoring approaches are highly personal and cannot be generalized by any means. Nevertheless, there seem to be differences depending on the experience of individuals. Having a good mix of seniority in a team can help you as a leader to have some of your tasks balanced or even taken away by team dynamics because people start to mentor each other.\nOne recent example I have seen is that a junior did a tech-talk about what he\u0026rsquo;s just learned, which inspired and transported more current/detailed knowledge to the group\u0026rsquo;s seniors.\nSocial Aspects Of course, I can\u0026rsquo;t explain this precisely. However, I think that many not yet so experienced developers (have to) ask more questions and in this way also deal more with the team members and not only with the subject matter. Often conversations with other team members lead to mutual motivation even if they remain technical. Not only for the junior who learns something new but also for the counterpart who can successfully communicate his experience and knowledge.\nThis communication in the team is not as one-sided as simplified here, but I am also not a psychologist and therefore have no more profound knowledge of this matter.\nFinal Words Last but not least, we counteract the extreme skills shortage in the industry by passing on the knowledge in our organizations and teams to the next generation of young talent (okay, it sounds very strange to say that in my 30s). I think that every company shares this commitment and can improve the often \u0026ldquo;self-made\u0026rdquo; shortage of skilled workers.\nIn my experience, almost all employees are happy to pass on knowledge and actively participate in mentoring juniors if they are given the opportunity. Hiring a junior can even provide variety in the team and new challenges for bogged down or bored seniors.\nI was inspired to write this post by Manuela Brunner and her story. I wish you all the best for your future path.\n","date":"12 Mar, 2022","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cpicture\u003e\n  \u003csource srcset=\"/images/post/2022-03-12-hiring-devs-why-consider-juniors_hue06fe54824cecd9a253a7478315926bf_577626_545x0_resize_q95_h2_box_3.webp\" media=\"(max-width: 575px)\"\u003e\n  \u003csource srcset=\"/images/post/2022-03-12-hiring-devs-why-consider-juniors_hue06fe54824cecd9a253a7478315926bf_577626_600x0_resize_q95_h2_box_3.webp\" media=\"(max-width: 767px)\"\u003e\n  \u003csource srcset=\"/images/post/2022-03-12-hiring-devs-why-consider-juniors_hue06fe54824cecd9a253a7478315926bf_577626_700x0_resize_q95_h2_box_3.webp\" media=\"(max-width: 991px)\"\u003e\n  \u003csource srcset=\"/images/post/2022-03-12-hiring-devs-why-consider-juniors_hue06fe54824cecd9a253a7478315926bf_577626_1110x0_resize_q95_h2_box_3.webp\"\u003e\n  \u003cimg loading=\"lazy\" decoding=\"async\" class=\"w-100 img-fluid rounded\" src=\"/images/post/2022-03-12-hiring-devs-why-consider-juniors_hue06fe54824cecd9a253a7478315926bf_577626_1110x0_resize_box_3.png\" alt=\"\" width=\"1110\" height=\"572\"\u003e\n\u003c/picture\u003e\n \n \n \n\n","permalink":"https://www.frankneff.com/blog/2022-03-12-hiring-devs-why-you-should-consider-juniors/","tags":["recruiting","staffing","series"],"title":"Hiring Devs - Why you should consider Juniors"},{"categories":["Software Architecture","Programming"],"contents":"Spring cloud config is a configuration management solution and part of the Spring ecosystem. It\u0026rsquo;s easy to integrate and use, but it has severe downsides from an architectural perspective. Also, I have seen many projects where it was added just because \u0026ldquo;it is a thing\u0026rdquo; and even more often, it was used to solve or work around problems in the software architecture or deployment for which it doesn\u0026rsquo;t provide a real solution. In this blog post, I\u0026rsquo;ll point out some conceptional issues and downsides of that project I have seen so far.\nOf course, there are circumstances where it makes sense to use Spring Cloud Config, or more generalized, a configuration management and distribution solution. Anyway, from my personal experience, it is more often misused or not needed.\nSelf-Contained Applications I would, in general, not consider an application that needs to fetch its basic configuration over an HTTP connection as \u0026ldquo;self-contained\u0026rdquo;. This indirection often adds complexity and virtual hurdles to an application bootstrap. The config server must be reachable and working. The HTTP connection between all applications and the config server must be stable and protected (see Security). Also, this adds a dependency for local development, where you potentially need to start a config server on your local machine just to be able to work on another service. In general, there is much complexity added by a config management server.\nSecurity At least on production, security concerns should be taken into account. An application\u0026rsquo;s configuration contains\nsensitive information like database access credentials, secret keys, certificates, etc. Exchanging this information via HTTP, even if you\u0026rsquo;re inside a protected perimeter, needs really strong security mechanisms, or should probably just be avoided in favor of that. Those strong security mechanisms, for example, to provide keys to an application\u0026rsquo;s configuration, exist, but they are nowadays mostly baked into your cloud infrastructure. See secrets management of Kubernetes or Docker Swarm for examples.\nOften-Changing Configurations A famous pro-argument of some users is that you can reload your Spring configuration without restarting or redeploying. For me, there are two things that should be thought about when it comes to this significant use-case:\nImprove your Deployment One thing that potentially causes you to use this \u0026ldquo;hot config change\u0026rdquo; mechanism is that your deployment is not stable or fast enough. In a modern cloud environment, deploying an application is not only very simple but should also be quick and \u0026ldquo;zero-downtime\u0026rdquo;. So, if you need this feature, just because you don\u0026rsquo;t want to deploy your application for a config change, you\u0026rsquo;re maybe just working around existing problems with your build and deployment pipelines.\nDon\u0026rsquo;t keep everything in Application Configuration If you still need fast and often changing configs, also ask yourself which kinds of configs\u0026hellip; An application configuration should be one very stable and semi-static container of information required by the application itself to connect other services, databases, etc., and configure itself on startup. If you have often changing endpoints or IPs of services/databases, which is a very usual case in a cloud-based microservice architecture, use a Service-Discovery mechanism or load balancer instead of changing the configuration all the time. Also, some configuration values which are often changing by nature should be stored in a database and made accessible/changeable by a management GUI instead.\nConfigs for different Profiles Another argument for a cloud config server is having different profiles, e.g. for different environments or multiple tenants. Spring is already capable of managing configuration for different profiles very well, and it has excellent documentation\u0026hellip;\nBetter Alternatives Management of your application configuration is a concern that should be handled by or near your infrastructure and deployment. Most cloud and hosting infrastructures provide excellent configuration management by using environment variables or injecting configuration files. This not only keeps your credentials secret but also allows you to provide a working local configuration for developers, which is then overridden by your hosting infrastructure in production or test systems.\nFinal Words I personally only see very rare use-cases where Spring Cloud Config adds real value today. Especially when you\u0026rsquo;re hosting in a private or public cloud, you should consider using its onboard configuration management mechanisms. They are often way more powerful than a config-server, without adding dependencies.\nDon\u0026rsquo;t use technology just because it\u0026rsquo;s a thing. Always ask yourself if you really need it.\nI recently have removed Spring Cloud Config from a medium-sized project (12 Microservices, 3 SPA) and in-sourced configuration using YAML files, which improved its availability, lowered the hosting costs and removed complexity for developers. Still, I see many devs out there using and advertising it for use-cases it is not built for.\n","date":"25 Feb, 2022","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cpicture\u003e\n  \u003csource srcset=\"/images/post/2022-02-25-why-you-dont-need-spring-cloud-config_hu0efbf9b7a33f8ca8b239b4885574101e_234856_545x0_resize_q95_h2_box_3.webp\" media=\"(max-width: 575px)\"\u003e\n  \u003csource srcset=\"/images/post/2022-02-25-why-you-dont-need-spring-cloud-config_hu0efbf9b7a33f8ca8b239b4885574101e_234856_600x0_resize_q95_h2_box_3.webp\" media=\"(max-width: 767px)\"\u003e\n  \u003csource srcset=\"/images/post/2022-02-25-why-you-dont-need-spring-cloud-config_hu0efbf9b7a33f8ca8b239b4885574101e_234856_700x0_resize_q95_h2_box_3.webp\" media=\"(max-width: 991px)\"\u003e\n  \u003csource srcset=\"/images/post/2022-02-25-why-you-dont-need-spring-cloud-config_hu0efbf9b7a33f8ca8b239b4885574101e_234856_1110x0_resize_q95_h2_box_3.webp\"\u003e\n  \u003cimg loading=\"lazy\" decoding=\"async\" class=\"w-100 img-fluid rounded\" src=\"/images/post/2022-02-25-why-you-dont-need-spring-cloud-config_hu0efbf9b7a33f8ca8b239b4885574101e_234856_1110x0_resize_box_3.png\" alt=\"\" width=\"1110\" height=\"572\"\u003e\n\u003c/picture\u003e\n \n \n \n\n","permalink":"https://www.frankneff.com/blog/2022-02-25-why-you-dont-need-spring-cloud-config/","tags":["spring","config","complexity"],"title":"Why you probably don't need Spring Cloud Config"},{"categories":["Engineering Teams","Hiring Devs"],"contents":"In IT, there is a paradox when it comes to job titles. Somewhere along the way, the practice of linking job titles to a candidate\u0026rsquo;s (desired) experience became established in large parts of the market. This then created the now famous and omnipresent job titles like \u0026ldquo;Senior Software Engineer\u0026rdquo;, \u0026ldquo;Professional DevOps Engineer\u0026rdquo;, etc. In this blog post, I would like to explain the paradox around these designations and how I use them in the course of the talent search\u0026hellip;\nJob Titles in Software-Engineering Job titles in software development have become merely irrelevant to me personally in my twenties, but I would like to try to decipher them a bit\u0026hellip;\nSome examples:\nSenior Software Engineer Principal Data Scientist (Quantitative Analysis) Intermediate Java Backend Engineer Staff Site Reliability Engineer Junior DevOps \u0026amp; Cloud Solution Architect The list can go on endlessly\u0026hellip;\nJob Title / Discipline [blue] Because Software Engineering is a huge field of different disciplines, technologies, and paradigms, people tend to split it into disciplines, layers, patterns, etc. Some well-known differentiations are, for example, frontend / backend / systems (site reliability) or design / engineering / architecture. Some also name the disciplines after technologies, e.g. \u0026ldquo;Java Engineer\u0026rdquo;. There are some common patterns, but nothing formal.\nSpecialization [green] This part, which is normally infix or postfix, describes a specialization or main technology used by that role. Originally, the technology or programming language used was often named here. However, due to technology diffusion (people use many different ted technologies today), the tendency is declining. Even more rarely, a specific field of work is given here as a concretization of the discipline. This occurs mainly in very scientific positions.\nSeniority Prefix [red] This is usually the first word in the job title and expresses \u0026ldquo;seniority\u0026rdquo;, sometimes career level [brown]. The prefix can also be omitted, of which some then imply Intermediate / Professional level and few others, like me, do not want to define that.\nThe following prefixes are frequently used and are sorted in ascending order of seniority / experience:\nTrainee Junior Intermediate / Professional Senior Principal Staff Up to and including \u0026ldquo;senior\u0026rdquo;, the prefix describes the (desired) experience or depth of the skillset. Some prefixes (e.g. \u0026ldquo;Principal\u0026rdquo;, \u0026ldquo;Staff\u0026rdquo;, \u0026ldquo;Head of\u0026rdquo;, etc.) imply technical or even personal management responsibility. In this respect, I can only recommend employers to include or exclude such requirements very explicitly at the appropriate place. As potential candidates, you should ask, in case of doubt, already in the initial interview whether the position has management responsibility or not. Unfortunately, I have already experienced nasty misunderstandings in this respect myself.\nIf you\u0026rsquo;re a \u0026ldquo;senior\u0026rdquo; at anything at the tender age of 21, you can either see the irony in that or be motivated by it. The latter probably won\u0026rsquo;t last long, but many employers still like to use it.\nMotivational Factors Awesome-sounding job titles motivate most of us and that is exactly why so many of them exist. Motivating talent is a very difficult task and has many aspects. Just being able to quickly change the job title on the team page and in the mail footer is one of the easier ones.\nMany, especially younger developers, experience a change, for example from \u0026ldquo;Intermediate\u0026rdquo; to \u0026ldquo;Senior\u0026rdquo; as a great success and advancement on the career ladder. This usually provides a big motivation boost, which is often reflected in the performance.\nMany people do not know that a promotion usually also includes new tasks, competencies, and responsibilities as well as a salary increase, or they simply do not demand it. This then remains a mere \u0026ldquo;job title update\u0026rdquo; for motivational purposes.\nThe Dunning-Kruger Effect Those who take the seniority prefix seriously quickly find themselves in the judging party\u0026rsquo;s difficult position. Indeed, the difference between how \u0026ldquo;senior\u0026rdquo; someone actually is, is almost impossible to formally determine. That is why experience has to be used here, which leads to the Dunning-Kruger effect1.\nTo be able to evaluate experience or knowledge, one has to have it oneself. In addition, there is the tendency to overestimate oneself, which is inversely proportional to the actual knowledge. Since we humans fundamentally overvalue our own knowledge, the seniority question is more about cognitive bias than an actual assessment of knowledge.\nWriting Seniority into Job-Ads I have made the experience that I find better candidates if I simply advertise a \u0026ldquo;Software Engineer\u0026rdquo;, without a super-duper prefix. More often, candidates who overestimate themselves or even just pretend to be qualified, apply for senior positions labeled as such. In addition, many \u0026ldquo;seniors\u0026rdquo; have simply seen it all, are no longer willing to learn and tend to not be team players. Last but not least, they often demand wages that are far above their qualifications.\nThe far more important aspect, however, is that seniority prefixes artificially create exclusivity and potentially excellent talent therefore does not apply because they do not feel \u0026ldquo;senior\u0026rdquo; enough for the job.\nIf you still want to use the seniority prefix in your job ads, I recommend writing multiple different postings for the same position and comparing applicants.\nConclusion All in all, I can say that as a developer myself, I used to give a lot about a \u0026ldquo;Senior\u0026rdquo; title, and I was heavily motivated to reach it in the past. For certain personalities, their own job title can be a motivator and spur them on to peak performance.\nHowever, these days I rarely use these categories, especially not as goals or motivation for developers. I am convinced that these titles often create the wrong incentives and even negatively reinforce one or the other when it comes to team play. Especially in job postings, I have observed that I find more and better-qualified applicants when I deliberately avoid seniority indications and search for humans instead of superheroes.\nDunning-Kruger Effect on Wikipedia\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"10 Dec, 2021","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cpicture\u003e\n  \u003csource srcset=\"/images/post/2021-12-10-hiring-devs-the-seniority-paradox_hue06fe54824cecd9a253a7478315926bf_577626_545x0_resize_q95_h2_box_3.webp\" media=\"(max-width: 575px)\"\u003e\n  \u003csource srcset=\"/images/post/2021-12-10-hiring-devs-the-seniority-paradox_hue06fe54824cecd9a253a7478315926bf_577626_600x0_resize_q95_h2_box_3.webp\" media=\"(max-width: 767px)\"\u003e\n  \u003csource srcset=\"/images/post/2021-12-10-hiring-devs-the-seniority-paradox_hue06fe54824cecd9a253a7478315926bf_577626_700x0_resize_q95_h2_box_3.webp\" media=\"(max-width: 991px)\"\u003e\n  \u003csource srcset=\"/images/post/2021-12-10-hiring-devs-the-seniority-paradox_hue06fe54824cecd9a253a7478315926bf_577626_1110x0_resize_q95_h2_box_3.webp\"\u003e\n  \u003cimg loading=\"lazy\" decoding=\"async\" class=\"w-100 img-fluid rounded\" src=\"/images/post/2021-12-10-hiring-devs-the-seniority-paradox_hue06fe54824cecd9a253a7478315926bf_577626_1110x0_resize_box_3.png\" alt=\"\" width=\"1110\" height=\"572\"\u003e\n\u003c/picture\u003e\n \n \n \n\n","permalink":"https://www.frankneff.com/blog/2021-12-10-hiring-devs-the-seniority-paradox/","tags":["recruiting","staffing","series"],"title":"Hiring Devs - The Seniority Paradox"},{"categories":["Announcements"],"contents":"I noticed that I write not as often as I want to, so I procrastinated and first relaunched my blog instead of writing. It has a new design and some new functionality, also the posts have now images. The relaunch was, for me, some kind of personal retrospective, where I read all my old posts and found out that I\u0026rsquo;m probably a better webmaster than a writer\u0026hellip;\nNew Domain FrankNeff.com I used to write mostly about code, why franks.codes was kind of a fitting domain and a good decision at that time. But this is not true anymore. As everyone does, I have changed the things I think and write about from pure coding towards connecting business, people, and technology.\nBecause of this and many other reasons, I decided to go live with the new domain www.frankneff.com and also rebrand my homepage and social profiles in this course. Because I\u0026rsquo;m swiss, and this was my very first own domain, frankneff.ch also redirects to this blog, but is otherwise unused.\nNew Design I have a new design. It is still simple and clean, but not so \u0026ldquo;nerdy\u0026rdquo; then the last one. I think it matches the new domain and content better but still supports readability. Tell me if you like it.\nAlso, the categories and tags have been cleaned up a bit, especially in the older posts, just as a housekeeping measure.\nThings which stay the same Still hugo built, but a newer version Still completely open-source on github.com/frne/frne.github.io. Anyways, please don\u0026rsquo;t steal my content without credit. Sadly, the content\u0026hellip; There is no new content by the time writing this, but I have roughly 10 posts planned / in mind. I just need to write them. #procrastination I hope you like the new design and structure of my blog. Leave a comment or tell me your thoughts on LinkedIn or Twitter.\n","date":"05 Dec, 2021","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cpicture\u003e\n  \u003csource srcset=\"/images/post/2021-12-05-blog-relaunch_hucda560177772975525f938229f19457d_40342_545x0_resize_q95_h2_box.webp\" media=\"(max-width: 575px)\"\u003e\n  \u003csource srcset=\"/images/post/2021-12-05-blog-relaunch_hucda560177772975525f938229f19457d_40342_600x0_resize_q95_h2_box.webp\" media=\"(max-width: 767px)\"\u003e\n  \u003csource srcset=\"/images/post/2021-12-05-blog-relaunch_hucda560177772975525f938229f19457d_40342_700x0_resize_q95_h2_box.webp\" media=\"(max-width: 991px)\"\u003e\n  \u003csource srcset=\"/images/post/2021-12-05-blog-relaunch_hucda560177772975525f938229f19457d_40342_1110x0_resize_q95_h2_box.webp\"\u003e\n  \u003cimg loading=\"lazy\" decoding=\"async\" class=\"w-100 img-fluid rounded\" src=\"/images/post/2021-12-05-blog-relaunch_hucda560177772975525f938229f19457d_40342_1110x0_resize_q95_box.jpg\" alt=\"\" width=\"970\" height=\"500\"\u003e\n\u003c/picture\u003e\n \n \n \n\n","permalink":"https://www.frankneff.com/blog/2021-12-05-blog-relaunch/","tags":["news","procrastination"],"title":"Blog Relaunch (Yes, again)"},{"categories":["Business","Leadership","Engineering Teams"],"contents":"There are (still) many people telling proudly, how complex their product is. There are job ads, explaining that you will \u0026ldquo;create highly complex software\u0026rdquo;. These false signals, which I personally saw in many positions and projects, create a potentially huge long-tail problem, not primarily for engineers, but for the product management and engineering team lead. In this blogpost, I want to point out some of those impacts of advertising complexity\u0026hellip;\nComplexity of Business Process When building digital products, it turned out as a good practice to categorize complexity in categories. The first, I call it \u0026ldquo;complexity of business process\u0026rdquo; describes how complex the process behind your product is. So for example, a simple camera app (press button, take photo, show photo) is not very complex, but a full-blown CRM probably is. If the requirements or even simpler, the process you want to digitalize is complex, the software you\u0026rsquo;re building will always be1.\nOf course it\u0026rsquo;s becoming worse, if the business process is broken or not well defined. Then the software made of it will probably be broken or at least buggy.\nKeep in mind: If you digitalize a not well-defined or not well working process, you just move its complexity and problems into code, where you can\u0026rsquo;t observe it anymore.\nIntrinsic Complexity My second category covers \u0026ldquo;self-made\u0026rdquo; complexity during an engineering process. There are various reasons for intrinsic complexity, e.g.:\nChanging requirements Technical debt (historic technical problems, which lead to problems in current development) Lack of Knowledge (an engineer didn\u0026rsquo;t knew a simpler solution) \u0026ldquo;Superheroism\u0026rdquo; (an engineer wanted to make it more complex then needed for personal/egoistic reasons) Intrinsic complexity can be prevented to a certain extent by actively promoting knowledge and establishing a working development process with quality assurance mechanisms like static code analysis and peer reviews2.\nImpacts on the Product When it comes to the practical impact, the kind of complexity is not relevant anymore. It doesn not make a difference, if the business process is badly designed, the requirements are unclear, or the quality of the product was not assured from the beginning. All those different kinds of complexity (or \u0026ldquo;problems\u0026rdquo; they become), have the same impacts on the product:\nBad User Experience (UX) To the user, the application feels unintuitive, difficult to handle, or even not usable. These problems often arise due to poorly designed processes in the application or insufficient UX design3. Of course, there is no standard solution for these problems. However, it often helps enormously to staff the roles in the project (especially business analyst, UX engineer and UI / frontend designer) strongly. Especially in projects with smaller budgets these roles often overlap, but it is crucial that they are defined and staffed.\nIn most of the projects I\u0026rsquo;ve seen fail so far, these roles were not or insufficiently staffed. Don\u0026rsquo;t skip proper business analysis or UX engineering because of low budget.\nBad Performance Since performance is a separate discipline in software development, it cannot be generalized in any case. Also, the reasons for poor performance can be almost anything. However, one reason for this, which I myself have observed many times, is the complexity of the application itself.\nIn theoretical computer science, complexity always means time. Simple things are fast, complicated things take a long time. Since process complexity cannot always be prevented, performance becomes a constant companion.\nYou can significantly reduce the impact of this problem category by introducing and further developing quality assurance measures (static code analysis, automated tests, load tests, etc.). If performance is a critical factor, and it often is, use technical tools to continuously measure and analyze performance.\nHigh Ongoing Costs This is a purely logical conclusion, because complexity always causes additional costs4, but also simply an effect of the previous problems. Poor performance causes higher hosting expenses, confused users more support cases.\nEven in the rare case that you don\u0026rsquo;t care if your software is slow and barely unusable, it will cause high costs in hosting and support, which will increase with time and further development.\nConclusion Complexity, also from a business perspective, is always bad. Try to avoid or minimize it, not only because it fosters a poor development culture and morale, but also because it can result in very high, ongoing costs. Last but not least, complexity always means effort and frustration, which you can lower for everyone involved, by taking business analysis, development processes, and quality assurance seriously.\nN. Fenton, P. Krause and M. Neil, \u0026ldquo;Software measurement: uncertainty and causal modeling,\u0026rdquo; in IEEE Software, vol. 19, no. 4, pp. 116-122, July-Aug. 2002, doi: 10.1109/MS.2002.1020298.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nS. F. Ochoa and F. J. Gutierrez, \u0026ldquo;Architecting E-Coaching Systems: A First Step for Dealing with Their Intrinsic Design Complexity,\u0026rdquo; in Computer, vol. 51, no. 3, pp. 16-23, March 2018, doi: 10.1109/MC.2018.1731079.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nFrancisco Inchauste, \u0026ldquo;The Dirtiest Word in UX: Complexity\u0026rdquo; on uxmag.com, 10.08.2021\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n\u0026ldquo;Complexity Costs\u0026rdquo; on wilsonperumal.com, 10.08.2021\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"10 Aug, 2021","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cpicture\u003e\n  \u003csource srcset=\"/images/post/2021-08-10-why-complexity-in-software-is-bad_hub6bc94faa550d601d8bfb4a923e32454_85418_545x0_resize_q95_h2_box.webp\" media=\"(max-width: 575px)\"\u003e\n  \u003csource srcset=\"/images/post/2021-08-10-why-complexity-in-software-is-bad_hub6bc94faa550d601d8bfb4a923e32454_85418_600x0_resize_q95_h2_box.webp\" media=\"(max-width: 767px)\"\u003e\n  \u003csource srcset=\"/images/post/2021-08-10-why-complexity-in-software-is-bad_hub6bc94faa550d601d8bfb4a923e32454_85418_700x0_resize_q95_h2_box.webp\" media=\"(max-width: 991px)\"\u003e\n  \u003csource srcset=\"/images/post/2021-08-10-why-complexity-in-software-is-bad_hub6bc94faa550d601d8bfb4a923e32454_85418_1110x0_resize_q95_h2_box.webp\"\u003e\n  \u003cimg loading=\"lazy\" decoding=\"async\" class=\"w-100 img-fluid rounded\" src=\"/images/post/2021-08-10-why-complexity-in-software-is-bad_hub6bc94faa550d601d8bfb4a923e32454_85418_1110x0_resize_q95_box.jpg\" alt=\"\" width=\"970\" height=\"500\"\u003e\n\u003c/picture\u003e\n \n \n \n\n","permalink":"https://www.frankneff.com/blog/2021-08-10-why-complexity-in-software-is-bad/","tags":["complexity","software-design","product-management"],"title":"Why complexity in software projects is bad (and you should not advertise it)"},{"categories":["Programming","Functional Programming"],"contents":"As you may know, Scala.js 1.0.0 just went final. For end-products, the upgrade is rather simple, just bump the plugin version and fix potential compile issues. If you\u0026rsquo;re maintaining a library, cross-building for 0.6.x and 1.0.x is still a bit tricky, but possible\u0026hellip;\nHow to parametrize the plugin version? First of all, one needs to find a way to locad different versions of the SBT plugin. This is possible using the following snippet:\nproject/plugins.sbt\nval scalaJSVersion = Option(System.getenv(\u0026#34;SCALAJS_VERSION\u0026#34;)).getOrElse(\u0026#34;1.0.1\u0026#34;) addSbtPlugin(\u0026#34;org.scala-js\u0026#34; % \u0026#34;sbt-scalajs\u0026#34; % scalaJSVersion) That\u0026rsquo;s basically it. Now one can release for different Scala.js versions using shell commands like the following:\nSCALAJS_VERSION=0.6.32 sbt +publish SCALAJS_VERSION=1.0.1 sbt +publish sbt +publish # picks default version As usual, the above will publish for all crossScalaVersions, but keep in mind, that Scala.js 1.0.x only supports Scala \u0026gt;= 2.12.\nEnabling the JSDom Scala.js 1.0.x has externalized the JSDom support to its own package, which in turn is not compatible with sjs 0.6.x. One approach to solve this, is adding the following to your project/plugins.sbt:\nlibraryDependencies ++= { if(scalaJSVersion.startsWith(\u0026#34;1.\u0026#34;)) { Seq(\u0026#34;org.scala-js\u0026#34; %% \u0026#34;scalajs-env-jsdom-nodejs\u0026#34; % \u0026#34;1.0.0\u0026#34; ) } else { Nil } } Now, the JSDom from Node.js can be used with both versions:\nbuild.sbt\njsEnv := new org.scalajs.jsenv.jsdomnodejs.JSDOMNodeJSEnv Version-based dependencies There are some libs, which are completely different between the versions. One example is scalajs-tools which was splitted into different ones (e.g. scalajs-logging) for 1.0.x. The following SBT code snippet enables version-based dependencies:\nbuild.sbt\nlibraryDependencies ++= Seq( \u0026#34;org.scala-js\u0026#34; %%% \u0026#34;scalajs-dom\u0026#34; % \u0026#34;1.0.0\u0026#34;, \u0026#34;co.fs2\u0026#34; %%% \u0026#34;fs2-core\u0026#34; % \u0026#34;2.3.0\u0026#34; ) ++ { if(scalaJSVersion.startsWith(\u0026#34;1.\u0026#34;)) Seq( \u0026#34;org.scala-js\u0026#34; %%% \u0026#34;scalajs-logging\u0026#34; % scalaJSVersion ) else Seq( \u0026#34;org.scala-js\u0026#34; %%% \u0026#34;scalajs-tools\u0026#34; % scalaJSVersion ) } ","date":"26 Feb, 2020","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cpicture\u003e\n  \u003csource srcset=\"/images/post/2020-02-26-crossbuilding-scalajs-1-0-and-0-6_hua9b37b7100901c951076613276d42afa_18041_545x0_resize_q95_h2_box.webp\" media=\"(max-width: 575px)\"\u003e\n  \u003csource srcset=\"/images/post/2020-02-26-crossbuilding-scalajs-1-0-and-0-6_hua9b37b7100901c951076613276d42afa_18041_600x0_resize_q95_h2_box.webp\" media=\"(max-width: 767px)\"\u003e\n  \u003csource srcset=\"/images/post/2020-02-26-crossbuilding-scalajs-1-0-and-0-6_hua9b37b7100901c951076613276d42afa_18041_700x0_resize_q95_h2_box.webp\" media=\"(max-width: 991px)\"\u003e\n  \u003csource srcset=\"/images/post/2020-02-26-crossbuilding-scalajs-1-0-and-0-6_hua9b37b7100901c951076613276d42afa_18041_1110x0_resize_q95_h2_box.webp\"\u003e\n  \u003cimg loading=\"lazy\" decoding=\"async\" class=\"w-100 img-fluid rounded\" src=\"/images/post/2020-02-26-crossbuilding-scalajs-1-0-and-0-6_hua9b37b7100901c951076613276d42afa_18041_1110x0_resize_q95_box.jpg\" alt=\"\" width=\"970\" height=\"500\"\u003e\n\u003c/picture\u003e\n \n \n \n\n","permalink":"https://www.frankneff.com/blog/2020-02-26-crossbuilding-scalajs-1-0-and-0-6/","tags":["sbt","scala","scala.js","library"],"title":"Crossbuilding Scala.js 1.0 and 0.6"},{"categories":["Programming"],"contents":"I personally like the Spring Framework and its security components, because it\u0026rsquo;s pretty full-featured and easy to use, but when it comes to Spring Security OAuth2, there\u0026rsquo;s a huge quality breakdown. In this (probably series) of blogposts, I\u0026rsquo;ll try to sum up the good, the bad, the evil and why I ended up completely dropping Spring Security OAuth2.\nA new Project It all began (as always) with a new project. There were some basic requirements to fulfill regarding the application and security architecture:\nAngular SPA with a Spring Boot backend Users should be able to log in using GitHub or GitLab Backend should map authenticated users to DB entities Backend communication should not be stateful (no session) OAuth tokens must be persisted b.c. used for server side API calls Of course the first thought on this was:\nEasy peasy, Spring Security Oauth2 with custom success handler, done. – Me\nBut this was just wrong\u0026hellip;\nThe naive approach Of course the first approach was just adding dependencies and some configuration and check if it works, like virtually always using spring boot. For the reference, we\u0026rsquo;re doing Spring Boot 2.2.1.RELEASE with Kotlin 1.3.60 on a JVM 11:\nAdded dependencies:\nimplementation(\u0026#34;org.springframework.security:spring-security-oauth2-client\u0026#34;) implementation(\u0026#34;org.springframework.security:spring-security-oauth2-jose\u0026#34;) The whole OAuth2 config can theoretically be done using application.yml configuration. Btw. if you are looking to use GitLab as OAuth provider with Spring, the following config works at the time of writing this post:\nspring: security: oauth2: client: registration: github: provider: github clientId: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX clientSecret: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX clientName: GitHub scope: - user:email - read:user # Custom attributes only parsed by com.example.shared.config.OauthExtraConfig: appId: 99999 signingKeyPath: key/example-dev.der gitlab: provider: gitlab clientId: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX clientSecret: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX clientName: GitLab authorizationGrantType: authorization_code redirectUri: \u0026#34;{baseUrl}/{action}/oauth2/code/{registrationId}\u0026#34; scope: - api - read_user - openid - profile - email provider: github: userNameAttribute: login # Default to predefined GitHub provider # See org.springframework.security.config.oauth2.client.CommonOAuth2Provider gitlab: authorizationUri: https://gitlab.com/oauth/authorize tokenUri: https://gitlab.com/oauth/token userInfoUri: https://gitlab.com/oauth/userinfo jwkSetUri: https://gitlab.com/oauth/discovery/keys userNameAttribute: nickname As already the last step, we need to add some lines to security config:\noverride fun configure(http: HttpSecurity) { http // request auth .authorizeRequests() .antMatchers( \u0026#34;/login/**\u0026#34;, \u0026#34;/oauth2/**\u0026#34;, ).permitAll() // default .anyRequest() .authenticated() .and() // disable form login .formLogin() .disable() // enable oauth2 login .oauth2Login() } After some GitLab documentation reading and probably less than 30 mins of coding, this \u0026ldquo;works\u0026rdquo; out of the box.\nOnly some small changes are still to do:\nMake auth flow stateless (default is based on an http session) Map users to the database and store tokens to access GitHub / GitLab Issue own JWT tokens for Angular SPA instead of forwarding GitHub / GitLab tokens These three little changes took me almost a week and finally forced me to give up Spring Security OAuth and implement stuff by hand.\nThings i\u0026rsquo;d like like to have known before Not all providers use the same standards. E.g. GitHub uses Oauth2 while GitLab uses OIDC. GitHub only sends the public email address within the user-info payload. If a users email is not public, you\u0026rsquo;ll need to make an authorized API call to get the email addresses. GitHub does not provide long-lived auth-tokens and also now renew-tokens for \u0026ldquo;GitHub Apps\u0026rdquo;. You\u0026rsquo;ll need to re-authenticate the user on a very regular basis, or use the GitHub App JWT (installation) authentication which is experimental by now. The whole spring implementation depends (hardcoded) on the state parameter which is passed along the auth flow, despite it\u0026rsquo;s not required in specification: https://tools.ietf.org/html/rfc6749#section-4.1.1 Next post will be about how to (try to) make the auth flow stateless.\n","date":"14 Dec, 2019","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cpicture\u003e\n  \u003csource srcset=\"/images/post/2019-11-19-spring-security-oauth-blues-simplicity_hubc30c910d210ed67678c23912f4dd541_32111_545x0_resize_q95_h2_box.webp\" media=\"(max-width: 575px)\"\u003e\n  \u003csource srcset=\"/images/post/2019-11-19-spring-security-oauth-blues-simplicity_hubc30c910d210ed67678c23912f4dd541_32111_600x0_resize_q95_h2_box.webp\" media=\"(max-width: 767px)\"\u003e\n  \u003csource srcset=\"/images/post/2019-11-19-spring-security-oauth-blues-simplicity_hubc30c910d210ed67678c23912f4dd541_32111_700x0_resize_q95_h2_box.webp\" media=\"(max-width: 991px)\"\u003e\n  \u003csource srcset=\"/images/post/2019-11-19-spring-security-oauth-blues-simplicity_hubc30c910d210ed67678c23912f4dd541_32111_1110x0_resize_q95_h2_box.webp\"\u003e\n  \u003cimg loading=\"lazy\" decoding=\"async\" class=\"w-100 img-fluid rounded\" src=\"/images/post/2019-11-19-spring-security-oauth-blues-simplicity_hubc30c910d210ed67678c23912f4dd541_32111_1110x0_resize_q95_box.jpg\" alt=\"\" width=\"970\" height=\"500\"\u003e\n\u003c/picture\u003e\n \n \n \n\n","permalink":"https://www.frankneff.com/blog/2019-11-19-spring-security-oauth-blues-simplicity/","tags":["spring","security"],"title":"The Spring Security Oauth2 Blues - Simplicity"},{"categories":["Functional Programming","Data Science"],"contents":"When it comes to importing data into a BigData infrastructure like Hadoop, Apache Spark is one of the most used tools for ETL jobs. Because input data – in this case CSV – has often invalid values, a data cleaning layer is needed.Most tasks in data cleaning are very specific and therefore need to be implemented depending on your data, but some tasks can be generalized\u0026hellip;\nIn this post, I\u0026rsquo;ll not go into Spark, ETL or BigData in general, but provide one approach to clean null / empty values off a data set. This can be used in virtually any Scala project, Spark data-cleaning is only a nice use case to demonstrate it.\nThe Problem To describe the problem which needs to be solved, let\u0026rsquo;s say that we have a Stream of case objects as input. Some optional values in the input case class must be present, so we transform a Stream[A] to a Stream[B] where B is a new case class which contains the same values but maybe not optional:\ncase class A(normal: String, mandatory: Option[String], opt: Option[String]) case class B(normal: String, mandatory: String, opt: Option[String]) def transform(a: A): Option[B] = ??? val importStream: Stream[A] = ??? val cleaned = importStream.flatMap(transform) So far, so good. The mandatory field exists in both classes, but in the result B it is not optional. As one can see, the transform function returns an Option[B], which should be None if one of those \u0026ldquo;mandatory\u0026rdquo; fields has no value. In that tiny example, the transform method can just be implemented using a simple for-comprehention:\ndef transform(a: A): Option[B] = for { mandatory \u0026lt;- a.mandatory } yield B(a.normal, mandatory, b.opt) The Generic Approach The later transform implementation is very simple and straight forward. That said, nothing speaks against that specific implementation. If you only need this at a single point, and for a more or less small class, stop reading here and use the for-comprehention.\nBut\u0026hellip; Depending on the data, such case classes can be way bigger, having like 50 properties. Or one needs to transform 50 different classes. In that case, a generic function like the following becomes very handy:\ndef enforceNotNulls[A, B](a: A): Option[B] Because every case class implements Product, the HList of the Shapeless library can be utilized to do transformations on them. For an example, a trait called PartialProjector is defined:\nimport shapeless.{::, Generic, HList} trait PartialProjector[A, B] extends Serializable { def enforceNotNulls(a: A): Option[B] } This trait must now be implemented for all types which can be transformed. We\u0026rsquo;ll use Scalas implicit resolution afterwards to find the right function for the type to be transformed and call them recursively. To start with a simple example, an identProjector instance is implemented, which just maps all input types to options:\nobject PartialProjector extends LowPrioInstances { def instance[A, B](f: A =\u0026gt; Option[B]): PartialProjector[A, B] = new PartialProjector[A, B] { override def enforceNotNulls(a: A): Option[B] = f(a) } implicit def identProjector[A]: PartialProjector[A, A] = new PartialProjector[A, A] { override def enforceNotNulls(a: A): Option[A] = Option(a) } def apply[A, B](implicit partialProjector: PartialProjector[A, B]): PartialProjector[A, B] = partialProjector } This example is already usable for simple types like strings:\nPartialProjector[String, Option[String]](\u0026#34;foo\u0026#34;) // Some(\u0026#34;foo\u0026#34;) PartialProjector[String, Option[String]](null) // None As already mentioned, the apply[A,B] method of the PartialProjector object uses implicit resolution to find a fitting implementation of the trait for the given type A. The instance function is just a helper to instantiate the PartialProjector trait. Because there is only one implicit (the identProjector) which fits every type, results will always be Some(A) unless input is null.\nImplementation for Specific Types As a next step, specific types must be implemented. If, for example, an Option(String) is transformed, the result should not be Some(Some(String)), but Some(String). To achieve that, a second implicit for option types needs to be implemented:\ntrait LowPrioInstances { implicit def identProjector[A]: PartialProjector[A, A] = new PartialProjector[A, A] { override def enforceNotNulls(a: A): Option[A] = Option(a) } } object PartialProjector extends LowPrioInstances { def instance[A, B](func: A =\u0026gt; Option[B]): PartialProjector[A, B] = new PartialProjector[A, B] { override def enforceNotNulls(a: A): Option[B] = func(a) } implicit def optProjector[A]: PartialProjector[Option[A], A] = instance { case Some(x) =\u0026gt; Option(x) case None =\u0026gt; None } def apply[A, B](implicit partialProjector: PartialProjector[A, B]): PartialProjector[A, B] = partialProjector } First of all, because the identProjector matches every given type, it was moved to a parent trait LowPrioInstances. As the name suggests, this implicit will only be used, if none in PartialProjector matches. Also, there is a new implicit optProjector which handles Option[Any] types.\nCase Classes To transform case classes, first of all, an implicit for HLists (which is used to generically represent case classes) is needed:\nimplicit def hConsProjector[H, H0, T \u0026lt;: HList, T0 \u0026lt;: HList](implicit hProjector: PartialProjector[H, H0], tProjector: PartialProjector[T, T0]): PartialProjector[H :: T, H0 :: T0] = instance( hList =\u0026gt; { for { h \u0026lt;- hProjector.enforceNotNulls(hList.head) t \u0026lt;- tProjector.enforceNotNulls(hList.tail) } yield h :: t } ) Because a HList has a head and a tail (like Scala lists), the hConsProjector uses two implicits. The first hProjector is an instance to transform the head element. This could e.g be of type String or Option[Int], etc. The second one, tProjector, is an instance to transform the tail, which is another HList. So this will resolve to hConsProjector which is simply a recursive call. For the last, empty tail element (HNil), one could write a hNilProjector, but the identProjector already handles this correctly, so we don\u0026rsquo;t need one.\nNow that the PartialProjector can handle HLists, one more implicit is needed to transform case classes:\nimplicit def cClassProjector[CC1, CC2, Repr1, Repr2](implicit gen1: Generic.Aux[CC1, Repr1], gen2: Generic.Aux[CC2, Repr2], projector: PartialProjector[Repr1, Repr2]): PartialProjector[CC1, CC2] = instance( cc1 =\u0026gt; { projector.enforceNotNulls(gen1.to(cc1)).map(gen2.from) } ) This function takes an implicit for generic representations of source and target case classes (gen1 and gen2). The third generic is aprojector to transform the generics, which will resolve to hConsProjector. The method derives an HList from the input case object, runs the transformation on it and instanciates the target case class from the transformation result.\nUsage The PartialProjector can now be used like the generic function transform[A,B] in the problem definition to enforce not null / None elements in case classes:\ncase class A(normal: String, mandatory: Option[String], opt: Option[String]) case class B(normal: String, mandatory: String, opt: Option[String]) def in1 = A(\u0026#34;foo\u0026#34;, Some(\u0026#34;bar\u0026#34;), Some(\u0026#34;baz\u0026#34;)) def in2 = A(\u0026#34;foo\u0026#34;, None, Some(\u0026#34;baz\u0026#34;)) def res1: Option[B] = PartialProjector[A, B].enforceNotNulls(in1) // Some(B(\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;, \u0026#34;baz\u0026#34;)) def res2: Option[B] = PartialProjector[A, B].enforceNotNulls(in2) // None But Spark\u0026hellip; I used some glue-code is SPark to make things easier. The following will load CSV data from HDFS, create a DataSet[A] and transform it to a DataSet[B]:\ndef importData[A \u0026lt;: Product : TypeTag : NotNothing, B \u0026lt;: Product : TypeTag : NotNothing] (name: String, importFun: DataFrameReader =\u0026gt; Dataset[Row], filterFun: Dataset[Row] =\u0026gt; Row =\u0026gt; Boolean = _ =\u0026gt; _ =\u0026gt; true) (implicit spark: SparkSession, projector: PartialProjector[A, B]): Dataset[B] = { import spark.implicits._ val schema = Encoders.product[A].schema val reader: DataFrameReader = spark.read.schema(schema) val ds: Dataset[Row] = importFun(reader) val filterPred: Row =\u0026gt; Boolean = filterFun(ds) val filteredDs: Dataset[A] = ds.filter(in =\u0026gt; filterPred(in)).as[A] filteredDs. mapPartitions(_.map(projector.enforceNotNulls).collect { case Some(x) =\u0026gt; x }) } NotNothing As you may notice, the type arguments need some extra magic, because not all types can be transformed. Given types must implement Product for generic derivation, TypeTag so their type can be determined and finally NotNothig. The later is needed to prevent Nothing bottom type inference. More info about that \u0026ldquo;type inference hack\u0026rdquo; can be found in the hacking-scala.org article or just google \u0026ldquo;NotNothing\u0026rdquo;:\nimport scala.annotation.implicitNotFound @implicitNotFound(\u0026#34;Sorry, type inference was unable to figure out the type. You need to provide it explicitly.\u0026#34;) trait NotNothing[T] object NotNothing { private val Evidence: NotNothing[Any] = new Object with NotNothing[Any] implicit def notNothingEv[T](implicit n: T =:= T): NotNothing[T] = Evidence.asInstanceOf[NotNothing[T]] } Examples The importData function makes CSV loading very easy and keeps stuff generic. A simple example call will look like this:\ncase class RawGroup(id: Option[String], isActive: Option[Boolean], description: Option[String]) case class Group(id: String, isActive: Boolean, description: Option[String]) val import1: DataSet[Group] = importData[RawGroup, Group](\u0026#34;groups\u0026#34;, _. option(\u0026#34;header\u0026#34;, \u0026#34;true\u0026#34;). csv(\u0026#34;/data/some.csv\u0026#34;). withColumnRenamed(\u0026#34;Strange col N4m€\u0026#34;, \u0026#34;colName\u0026#34;). filter(\u0026#34;colName is not null\u0026#34;)) As you may noticed, an additional filter function can be passed, which becomes handy in some cases like filtering duplicates:\nval import2: DataSet[User] = importData[RawUser, User](\u0026#34;doctors\u0026#34;, _. option(\u0026#34;header\u0026#34;, \u0026#34;true\u0026#34;). option(\u0026#34;delimiter\u0026#34;, \u0026#34;;\u0026#34;). csv(\u0026#34;/data/user_*.csv\u0026#34;), rawUsers =\u0026gt; { import spark.implicits._ val duplicateUserIds = rawUsers. groupBy(\u0026#34;userId\u0026#34;).count. filter($\u0026#34;count\u0026#34; \u0026gt; 1). map(x =\u0026gt; x.getAs[Long](\u0026#34;userId\u0026#34;)). collect.toSet row =\u0026gt; duplicateUserIds.contains(row.getAs[Long](\u0026#34;userId\u0026#34;)) }) } The Some(null) case When reading CSV-data to typed DataSet[T], Option[_] fields on nullable columns produce None values, as expected. Sometimes\u0026hellip; But under certain conditions – which I am not able to further explain because I don\u0026rsquo;t know – values can be Some(null) which is basically a fever nightmare when trying to clean up dirty data\u0026hellip;\nThat problem can be solved by implementing another implicit to transform Some(null) to None. But because the implementation will propagate None values, we need to return Some(None) instead of just None. Otherwise, all transformations on case classes containing Option types will result in None instead of Option[B]:\nimplicit def optOptProjector[A]: PartialProjector[Option[A], Option[A]] = instance { case Some(x) =\u0026gt; if (x != null) Some(Some(x)) else Some(None) case None =\u0026gt; Some(None) } Note to myself: I suck at naming things\nFat-Jars If you build a fat jar using SBT assembly, which is common for Spark-jobs, please don\u0026rsquo;t forget to shade the dependent shapeless library, because spark also uses shapeless internally which may conflict otherwise.\nLimitations Because the transformation depend on the order of properties and not their labels, input and output case classes (A and B) must have the same number of properties in the same order. Of course it is also possible to build the HLists from labelled generics, so the properties with the same name would be mapped. I personally prefer mapping them by order, because by using this variant, properties can also be renamed during transformation.\n","date":"02 Mar, 2018","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cpicture\u003e\n  \u003csource srcset=\"/images/post/2018-03-02-generic-derivation-for-spark-data-cleaning_huf204ca923e9c13678a0936e032a01eeb_111446_545x0_resize_q95_h2_box.webp\" media=\"(max-width: 575px)\"\u003e\n  \u003csource srcset=\"/images/post/2018-03-02-generic-derivation-for-spark-data-cleaning_huf204ca923e9c13678a0936e032a01eeb_111446_600x0_resize_q95_h2_box.webp\" media=\"(max-width: 767px)\"\u003e\n  \u003csource srcset=\"/images/post/2018-03-02-generic-derivation-for-spark-data-cleaning_huf204ca923e9c13678a0936e032a01eeb_111446_700x0_resize_q95_h2_box.webp\" media=\"(max-width: 991px)\"\u003e\n  \u003csource srcset=\"/images/post/2018-03-02-generic-derivation-for-spark-data-cleaning_huf204ca923e9c13678a0936e032a01eeb_111446_1110x0_resize_q95_h2_box.webp\"\u003e\n  \u003cimg loading=\"lazy\" decoding=\"async\" class=\"w-100 img-fluid rounded\" src=\"/images/post/2018-03-02-generic-derivation-for-spark-data-cleaning_huf204ca923e9c13678a0936e032a01eeb_111446_1110x0_resize_q95_box.jpg\" alt=\"\" width=\"970\" height=\"500\"\u003e\n\u003c/picture\u003e\n \n \n \n\n","permalink":"https://www.frankneff.com/blog/2018-03-02-generic-derivation-for-spark-data-cleaning/","tags":["spark","typelevel","shapeless"],"title":"Using Shapeless for Data Cleaning in Apache Spark"},{"categories":["Programming","Functional Programming"],"contents":"Every Java library can be used in Scala, which is, for me, one of the good parts of the JVM world. But Java libs are mostly object-oriented and not functional, therefore full of side effects and somtimes \u0026ldquo;ugly\u0026rdquo; to use in Scala. But there are some approaches how to make Java libs (or their interfaces) more functional, so they can almost be used like a Scala lib.\nJava 8 Type Conversion Many Java types like Map or List, but also functional types (Java 8) like Optional\u0026lt;T\u0026gt; have Scala pendents. As this is one of the really log hanging fruits, convert those types to Scala. All collection types of Java can be converted by using Scalas own scala.collection.JavaConverters._. After importing the implicits, one can call .asScala on every Java collection:\nimport java.util import scala.collection.JavaConverters._ import scala.collection.mutable val jList: util.ArrayList[String] = new java.util.ArrayList[String]() val sBuf: mutable.Buffer[String] = jList.asScala val sList: List[String] = sBuf.toList The Optional\u0026lt;T\u0026gt; of Java 8 is, in my humble opinion, a huge benefit, but a bit disfunctional compared to Scalas Option[T]. When using Java interfaces that return optionals, it can also be converted:\nimport java.util.Optional implicit class Java8Optional[T](in: Optional[T]){ def asScala: Option[T] = if(in.isPresent) Option(in.get()) else None } val jOpt: Optional[String] = Optional.of(\u0026#34;foo\u0026#34;) val sOpt: Option[String] = jOpt.asScala Also, Java 8 functional interfaces, like java.util.Function\u0026lt;A,B\u0026gt; can be converted:\nimplicit class Java8Function[A, B](in: java.util.function.Function[A, B]) { def asScala: A =\u0026gt; B = (a: A) =\u0026gt; in.apply(a) } val jFunc: java.util.function.Function[String, String] = ??? val sFunc: String =\u0026gt; String = jFunc.asScala Note: Despite those conversions work, they are only meant for demonstration purposes. Scala has a compatibility library scala-java8-compat to convert Java to Scala types. Use it.\nImplicit Classes as Decorators As you could see, implicit classes are very handy to decorate Java objects, which you cannot change. This becomes especially handy when using Java libraries, like, for example SolrJ.\nTo simplify object construction (good old Java setters in that case) and minify observable side effects, functional object builders can be implemented that way. I used this approach, to design a Scala interface for the org.apache.solr.common.SolrDocument:\n/** Implicit ops for solr documents */ private[search] implicit class SolrDocumentOps(in: SolrDocument) { def asScala = new ScalaSolrDocument(in) } /** Typesafe representation of a solr document * * @param underlying The original (wrapped) solr document */ private[search] class ScalaSolrDocument(val underlying: SolrDocument) /** Helper method to add fields to existing result documents **/ def withField(fieldName: String, value: Any): ScalaSolrDocument = { val doc = new SolrDocument() underlying.entrySet().asScala.foreach(f =\u0026gt; doc.addField(f.getKey, f.getValue)) doc.addField(fieldName, value) doc.asScala } /** Transform function to maintain fluid interface, because document is not monadic */ def transform[T](f: SolrDocument =\u0026gt; T) = f(underlying) } To prevent confusion of the newly added Scala methods with the existing interface, the only method on the implicit decorator class is asScala which returns the custom ScalaSolrDocument which wraps the original object. An example to get rid of side effects is the method withField which constructs a new underlying SolrDocument every time a field is modified.\nThe usage is pretty simple:\nval doc = new SolrDocument val sDoc: ScalaSolrDocument = doc.asScala. withField(\u0026#34;name\u0026#34;, \u0026#34;Frank\u0026#34;), withField(\u0026#34;profession\u0026#34;, \u0026#34;programmer\u0026#34;) val res: SolrDocument = sDoc.underlying Implicit Conversion Another approach to convert between the original SolrDocument and the custom ScalaSolrDocument is Scalas implicit conversions feature.\nBy providing two implicit values containing the converter functions, the Scala compiler will implicitely convert between the two types where needed:\nimport scala.language.implicitConversions implicit val solrDocToScala = (in: SolrDocument) =\u0026gt; new ScalaSolrDocument(in) implicit val solrDocFromScala = (in: ScalaSolrDocument) =\u0026gt; in.underlying // could be a method of an interface which needs the original document def save(doc: SolrDocument) = ??? val jDoc = new SolrDocument() // original doc // implicit conversion to ScalaSolrDocument val sDoc = jDoc.withField(\u0026#34;name\u0026#34;, \u0026#34;Frank\u0026#34;) // implicit conversion back to SolrDocument save(sDoc) Note: Implicit conversions are considered an advanced language feature, because things can get confusing fast. Don\u0026rsquo;t overuse them.\n","date":"18 Dec, 2017","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cpicture\u003e\n  \u003csource srcset=\"/images/post/2017-12-18-using-java-libs-in-scala_hu33b6282982f8ea0e44f065180499d632_20436_545x0_resize_q95_h2_box.webp\" media=\"(max-width: 575px)\"\u003e\n  \u003csource srcset=\"/images/post/2017-12-18-using-java-libs-in-scala_hu33b6282982f8ea0e44f065180499d632_20436_600x0_resize_q95_h2_box.webp\" media=\"(max-width: 767px)\"\u003e\n  \u003csource srcset=\"/images/post/2017-12-18-using-java-libs-in-scala_hu33b6282982f8ea0e44f065180499d632_20436_700x0_resize_q95_h2_box.webp\" media=\"(max-width: 991px)\"\u003e\n  \u003csource srcset=\"/images/post/2017-12-18-using-java-libs-in-scala_hu33b6282982f8ea0e44f065180499d632_20436_1110x0_resize_q95_h2_box.webp\"\u003e\n  \u003cimg loading=\"lazy\" decoding=\"async\" class=\"w-100 img-fluid rounded\" src=\"/images/post/2017-12-18-using-java-libs-in-scala_hu33b6282982f8ea0e44f065180499d632_20436_1110x0_resize_q95_box.jpg\" alt=\"\" width=\"970\" height=\"500\"\u003e\n\u003c/picture\u003e\n \n \n \n\n","permalink":"https://www.frankneff.com/blog/2017-12-18-using-java-libs-in-scala/","tags":["scala","java","implicits","libs","solrj"],"title":"Java Libs in Scala - A bit more Functional"},{"categories":["Programming","Functional Programming"],"contents":"In Java 8, the long awaited Lambda came to live, making it easy(-er) to do FP in Java. One problem I came across is, that most Java code throws checked exceptions which leads to IMHO ugly try/catch blocks in lambdas:\nFunction\u0026lt;A, B\u0026gt; fun = (a: A) -\u0026gt; { try { // some function call that trows checked exception$ return callFn(a); } catch (Exception e) { // return failure result } }; The Good, the Bad and the Ugly A really simple, but also not really nice option is to wrap thrown exceptions into an unchecked one:\n@FunctionalInterface public interface CheckedFunction\u0026lt;T, R\u0026gt; extends java.util.function.Function\u0026lt;T, R\u0026gt; { @Override default R apply(T t) { try{ return applyChecked(t); } catch (Exception e) { throw new RuntimeException(e); } } R applyChecked(T t) throws Exception; } Now we have an ugly Function\u0026lt;T, R\u0026gt; which still has a side effect, but a hidden one, because the RuntimeException will bubble without being checked. This works, but is really ugly!\nPreventing Observable Side Effects To prevent the observable side effects (and yes, every thrown exception is one), one could create a return type containing the functions result or an exception instance:\nimport java.util.function.Function; @FunctionalInterface public interface ResultFunction\u0026lt;T, R\u0026gt; extends Function\u0026lt;T, ResultFunction.Result\u0026lt;R\u0026gt;\u0026gt; { @Override default Result\u0026lt;R\u0026gt; apply(T t) { try{ return Result.success(applyChecked(t)); } catch (Exception e) { return Result.error(e); } } R applyChecked(T t) throws Exception; final class Result\u0026lt;T\u0026gt; { private final T result; private final Exception error; private Result(T result, Exception error) { this.result = result; this.error = error; } static \u0026lt;A\u0026gt; Result\u0026lt;A\u0026gt; success(A result) { return new Result\u0026lt;\u0026gt;(result, null); } static \u0026lt;A\u0026gt; Result\u0026lt;A\u0026gt; error(Exception error) { return new Result\u0026lt;\u0026gt;(null, error); } public boolean isSuccess() { return error == null; } public \u0026lt;A\u0026gt; Result\u0026lt;A\u0026gt; map(Function\u0026lt;T, A\u0026gt; f) { return isSuccess() ? Result.success(f.apply(result)) : Result.error(error); } public \u0026lt;A\u0026gt; A fold(Function\u0026lt;Exception ,A\u0026gt; errorFn, Function\u0026lt;T, A\u0026gt; successFn) { return isSuccess() ? successFn.apply(result) : errorFn.apply(error); } public T getOrElse(Function\u0026lt;Exception, T\u0026gt; f) { return isSuccess() ? result : f.apply(error); } } } The Result\u0026lt;T\u0026gt; class is a generic disjoint union (some would call it Either\u0026lt;A,B\u0026gt;) which can have a result or an error. The fold method is convenient to forther process the result, because it just takes two functions (one for the error-case and one to process the result) which must return the same type. The ResultFunction\u0026lt;T, R\u0026gt; can be used (and defined) like a normal Function\u0026lt;T, R\u0026gt; but will return a Result\u0026lt;T\u0026gt; instead of throwing exceptions.\nThis implementation can be tested using the following simple main-method:\npublic class Main { private static ResultFunction\u0026lt;String, Integer\u0026gt; strPlusOne = in -\u0026gt; Integer.valueOf(in) + 1; public static void main(String... args) { System.out.println(res(\u0026#34;42\u0026#34;)); // Success: 43 System.out.println(res(\u0026#34;foo\u0026#34;)); // Error: input was not a number! System.out.println(strPlusOne.apply(\u0026#34;bar\u0026#34;). map(Object::toString). getOrElse(e -\u0026gt; \u0026#34;NaN\u0026#34;)); } private static String res(String in) { return strPlusOne.apply(in).fold( e -\u0026gt; \u0026#34;Error: input was not a number!\u0026#34;, r -\u0026gt; \u0026#34;Success: \u0026#34; + r ); } } As you can see in the res helper method, fold can be used to return either a success or an error string depending on the Result state. Or, linke in the second example, map and getOrElse can be used to achieve the same. This entirely depends on how you are used to code\u0026hellip;\nNow, a lambda throwing exceptions (NumberFormatException in that case), can be used without any side effect. Of course similar implementations do also work for other functional interfaces like BiFUnction, Supplier, etc.\nEdit: Use FunctionalJava if Possible An even better approach to handle exceptions in lambdas is, if you\u0026rsquo;re able to, use the Try-function of the FunctionalJava library. It does pretty much the same, but is more sophisticated and you don\u0026rsquo;t have to write it on your own. Give it a try and use other functional sugar like partial functions, products, unions, immutable collections, and so on\u0026hellip;\n","date":"06 Sep, 2017","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cpicture\u003e\n  \u003csource srcset=\"/images/post/2017-09-06-overcoming-checked-exceptions-lambda_huc6ed5effee25451bcd59edf53c5167f4_32458_545x0_resize_q95_h2_box.webp\" media=\"(max-width: 575px)\"\u003e\n  \u003csource srcset=\"/images/post/2017-09-06-overcoming-checked-exceptions-lambda_huc6ed5effee25451bcd59edf53c5167f4_32458_600x0_resize_q95_h2_box.webp\" media=\"(max-width: 767px)\"\u003e\n  \u003csource srcset=\"/images/post/2017-09-06-overcoming-checked-exceptions-lambda_huc6ed5effee25451bcd59edf53c5167f4_32458_700x0_resize_q95_h2_box.webp\" media=\"(max-width: 991px)\"\u003e\n  \u003csource srcset=\"/images/post/2017-09-06-overcoming-checked-exceptions-lambda_huc6ed5effee25451bcd59edf53c5167f4_32458_1110x0_resize_q95_h2_box.webp\"\u003e\n  \u003cimg loading=\"lazy\" decoding=\"async\" class=\"w-100 img-fluid rounded\" src=\"/images/post/2017-09-06-overcoming-checked-exceptions-lambda_huc6ed5effee25451bcd59edf53c5167f4_32458_1110x0_resize_q95_box.jpg\" alt=\"\" width=\"970\" height=\"500\"\u003e\n\u003c/picture\u003e\n \n \n \n\n","permalink":"https://www.frankneff.com/blog/2017-09-06-overcoming-checked-exceptions-in-java-lambdas/","tags":["exceptions","lambda","java"],"title":"Overcoming Checked Exceptions in Java Lambdas"},{"categories":["Programming","Functional Programming"],"contents":"This is the first post of my series about functional programming in Java. There\u0026rsquo;s a lot of functional stuff one can do. Everyone knows the Java 8 Lambda expression, but with a little library support, there is way more\u0026hellip; In this series, I\u0026rsquo;ll coder som libraries which provide functional paradigms and constructs for Java:\nFunctionalJava JavaSlang Java 8 Optional There is a native optional type since Java 8, called Optional\u0026lt;T\u0026gt;. It\u0026rsquo;s handy and covers the basic need: A typesafe alternative to Null.\nFunctional Java Option The Functional Java library has also an Option\u0026lt;T\u0026gt; type. It is not something completely different and has the same basic functionality as the Java Optional type. It\u0026rsquo;s just kind of personal preference which one you use, but I\u0026rsquo;ll recommend to use only one of them per project. The basic operations are heavily inspired by Scala:\nOption\u0026lt;String\u0026gt; opt1 = Option.some(new String(\u0026#34;foo\u0026#34;)); Option\u0026lt;String\u0026gt; opt2 = Option.none(); Option\u0026lt;String\u0026gt; opt3 = Option.fromNull(new String(\u0026#34;foo\u0026#34;)); Option\u0026lt;String\u0026gt; opt4 = Option.fromNull(null); opt1.isSome() // true opt2.isSome() // false opt3.isSome() // true opt4.isSome() // false Mapping On options, there is also a method isNone(), but in general, you\u0026rsquo;ll need those two methods rarely, because in most of all cases, you\u0026rsquo;ll map options. In the following example, fj.data.Option.* is statically imported, so we don\u0026rsquo;t need the object-prefix:\nfinal Option\u0026lt;Integer\u0026gt; opt1 = some(10); final Option\u0026lt;Integer\u0026gt; opt2 = none(); opt1.map(n -\u0026gt; n*2) // some(20) opt2.map(n -\u0026gt; n*2) // none() opt2.map(n -\u0026gt; n*2).orSome(0) // some(0) The map(f) function only applies, if the Option is of type some(). Otherwise, nothing happens. The last statement shows how to apply a default value using orSome(T). Of course it is also possible to provide a Lambda to orSome(final F0\u0026lt;A\u0026gt; a):\nopt2.map(n -\u0026gt; n*2).orSome(() -\u0026gt; 2) // some(2) ","date":"22 Nov, 2016","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cpicture\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_545x0_resize_q95_h2_box.webp\" media=\"(max-width: 575px)\"\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_600x0_resize_q95_h2_box.webp\" media=\"(max-width: 767px)\"\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_700x0_resize_q95_h2_box.webp\" media=\"(max-width: 991px)\"\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_1110x0_resize_q95_h2_box.webp\"\u003e\n  \u003cimg loading=\"lazy\" decoding=\"async\" class=\"w-100 img-fluid rounded\" src=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_1110x0_resize_q95_box.jpg\" alt=\"\" width=\"970\" height=\"500\"\u003e\n\u003c/picture\u003e\n \n \n \n\n","permalink":"https://www.frankneff.com/blog/2016-11-22-functional-java-1-option/","tags":["java","library"],"title":"Functional Java 1 - Options"},{"categories":["Announcements"],"contents":"You may have noticed, that I had not much time to blog about something in the past months\u0026hellip; One thing was, that we all need money, so I had to work very much. And as some of you know, I\u0026rsquo;m also studying in the evenings.\nLong story short, I\u0026rsquo;ve restarted blogging with a new engine and new design once again. Key is (not just to use new swag), to simplify blogging for me, so I can put more time in the articles and less in managing the blog itself. I\u0026rsquo;m not much of a frontend developer or a designer, so the design will maybe not impress you ;)\nTechnically, the new blog is based on Hugo and GitHub Pages, and you can find it on frne.github.com.\nI will port some of the older articles and of course add new ones.\nBig news: Currently for hire!\nIf you are looking a motivated Java/Scala dev in the area of Zurich (Switzerland), we maybe should talk ;)\n","date":"12 May, 2016","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cpicture\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_545x0_resize_q95_h2_box.webp\" media=\"(max-width: 575px)\"\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_600x0_resize_q95_h2_box.webp\" media=\"(max-width: 767px)\"\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_700x0_resize_q95_h2_box.webp\" media=\"(max-width: 991px)\"\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_1110x0_resize_q95_h2_box.webp\"\u003e\n  \u003cimg loading=\"lazy\" decoding=\"async\" class=\"w-100 img-fluid rounded\" src=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_1110x0_resize_q95_box.jpg\" alt=\"\" width=\"970\" height=\"500\"\u003e\n\u003c/picture\u003e\n \n \n \n\n","permalink":"https://www.frankneff.com/blog/2016-05-12-new-blog/","tags":["news"],"title":"New Blog"},{"categories":["Programming"],"contents":"Working with the Play! Framework means working with Akka, intentionally or not. But working with Akka Actors can be tricky, especially when it comes to dependency injection. Play! 2.4 uses Google\u0026rsquo;s Guice for DI and of course it has the ability to also bind Actors so an ActorRef can be injected anywhere.\nSingle Actor DI Biding and injecting one single Actor is simple and well documented . Just bind it in a Module:\npackage modules; import actors.MyExampleActor; import com.google.inject.AbstractModule; import play.libs.akka.AkkaGuiceSupport; public class ActorModule extends AbstractModule implements AkkaGuiceSupport { public static final String EXAMPLE_ACTOR_DI_NAME = \u0026#34;my-example-actor\u0026#34;; @Override protected void configure() { bindActor(MyExampleActor.class, EXAMPLE_ACTOR_DI_NAME); } } Enable the module in the app configuration:\nplay.modules.enabled = ${play.modules.enabled} [ modules.ActorModule ] Now you can inject the bound actor into every class using the @Inject and @Named annotation, e.g. in a Controller:\nKeep in mind: Actors should always be injected as ActorRef and not as the concrete class which has been implemented.\npackage controllers; import akka.actor.ActorRef; import akka.util.Timeout; import modules.ActorModule; import play.mvc.Controller; import play.mvc.Result; import scala.concurrent.Await; import scala.concurrent.duration.Duration; import scala.concurrent.duration.FiniteDuration; import javax.inject.Inject; import javax.inject.Named; import java.util.concurrent.TimeUnit; public class AssetController extends Controller { @Inject @Named(ActorModule.EXAMPLE_ACTOR_DI_NAME) ActorRef exampleActor; public Result publish(String assetType, String assetUuid) { FiniteDuration duration = Duration.create(5, TimeUnit.SECONDS); String response = Await.result( ask(exampleActor, \u0026#34;ask something\u0026#34;, new Timeout(duration)).mapTo(classTag(Strijg.class)), duration ); return ok(response); } } // disclaimer: Stuff like error handling and message protocols intentionally left out in favor of clarity\nActor Pools As you maybe know, there is the possibility to create pools of Actors instead of only one single instance. A pool behaves like a single actor, using a router to distribute messages to different child actors. The configuration options are huge, but most of the time, I personally only need an option to bind an actor pool using round robin distribution. No problems to achive this using the Akka configuration, but I could not find any documentation how to combine it using Play / Guice DI (in Java).\nIt turned out, that it is simple once you know it. Just pass the props of a RoundRobinPool to the bindActor method as a third argument:\nbindActor(MyExampleActor.class, EXAMPLE_ACTOR_DI_NAME, p -\u0026gt; new RoundRobinPool(5).props(p)); Now, instead of a single instance of MyExampleActor there is a pool of 5 of them waiting for messages.\nThe example works for Play! Framework 2.4 using Java 8 and will maybe break in future versions.\n","date":"02 May, 2016","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cpicture\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_545x0_resize_q95_h2_box.webp\" media=\"(max-width: 575px)\"\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_600x0_resize_q95_h2_box.webp\" media=\"(max-width: 767px)\"\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_700x0_resize_q95_h2_box.webp\" media=\"(max-width: 991px)\"\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_1110x0_resize_q95_h2_box.webp\"\u003e\n  \u003cimg loading=\"lazy\" decoding=\"async\" class=\"w-100 img-fluid rounded\" src=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_1110x0_resize_q95_box.jpg\" alt=\"\" width=\"970\" height=\"500\"\u003e\n\u003c/picture\u003e\n \n \n \n\n","permalink":"https://www.frankneff.com/blog/2016-05-02-play-guice-actor-pooling/","tags":["java","play","guice","akka"],"title":"Play Framework Actor Pooling with Guice (Java)"},{"categories":["Functional Programming"],"contents":"As my Scala projects go on, I want to share some compiler configuration and tricks with you, which I use on many projects. Some tiny configuration options can greatly improve your code and warn you about things, you would probably never discover.\nBasically, you can pass compiler options to scalac using console arguments:\n$ scalac -deprecation -unchecked -Xlint something.scala If you are using SBT, it\u0026rsquo;s even simpler\u0026hellip; You can just use the following configurations snippet in your build.sbt file to add scala options:\nscalacOptions ++= Seq(\u0026#34;-deprecation\u0026#34;, \u0026#34;-unchecked\u0026#34;, \u0026#34;-Xlint\u0026#34;) Common Scalac Options There are some common options which I\u0026rsquo;d like to share with you. Most of them make it harder to compile \u0026ldquo;not that good\u0026rdquo; code or warn about certain conditions:\nOption Description -deprecation Emit warning and location for usages of deprecated APIs. -feature Emit warning and location for usages of features that should be imported explicitly. -unchecked Enable additional warnings where generated code depends on assumptions. -Xfatal-warnings Fail the compilation if there are any warnings. -Xlint Enable recommended additional warnings. -Ywarn-adapted-arg Warn if an argument list is modified to match the receiver. -Ywarn-dead-code Warn when dead code is identified. -Ywarn-inaccessible Warn about inaccessible types in method signatures. -Ywarn-nullary-override Warn when non-nullary overrides nullary, e.g. def foo() over def foo. -Ywarn-numeric-widen Warn when numerics are widened. -Ywarn-value-discard Warn when non-Unit expression results are unused. -Ywarn-unused arn when local and private vals, vars, defs, and types are unused. This is just a very small subset of available options for the Scala compiler. If you want to see all options available, just ask your scalac for it. To show all the options, just run scalac -X or scalac -Y. You can also just display the compiler help using scalac -help.\nFinally, my personal Scala options (as SBT settings) for most of the Scala projects I currently work on:\n// compiler tuning for the win - makes it harder to build schwurbl scalacOptions ++= Seq( \u0026#34;-deprecation\u0026#34;, \u0026#34;-feature\u0026#34;, \u0026#34;-unchecked\u0026#34;, \u0026#34;-Xfatal-warnings\u0026#34;, \u0026#34;-Xlint\u0026#34;, \u0026#34;-Ywarn-adapted-args\u0026#34;, \u0026#34;-Ywarn-dead-code\u0026#34;, \u0026#34;-Ywarn-inaccessible\u0026#34;, \u0026#34;-Ywarn-nullary-override\u0026#34;, \u0026#34;-Ywarn-numeric-widen\u0026#34;, \u0026#34;-Ywarn-value-discard\u0026#34;, \u0026#34;-Ywarn-unused\u0026#34;, ) Of course there are also such options for javac, the Java compiler. Just run javac -help or javac -X\u0026hellip;\nAs always, I really apreciate feedback of all kinds, or just send me your compiler configuration\u0026hellip;\n","date":"15 Apr, 2016","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cpicture\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_545x0_resize_q95_h2_box.webp\" media=\"(max-width: 575px)\"\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_600x0_resize_q95_h2_box.webp\" media=\"(max-width: 767px)\"\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_700x0_resize_q95_h2_box.webp\" media=\"(max-width: 991px)\"\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_1110x0_resize_q95_h2_box.webp\"\u003e\n  \u003cimg loading=\"lazy\" decoding=\"async\" class=\"w-100 img-fluid rounded\" src=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_1110x0_resize_q95_box.jpg\" alt=\"\" width=\"970\" height=\"500\"\u003e\n\u003c/picture\u003e\n \n \n \n\n","permalink":"https://www.frankneff.com/blog/2016-04-15-scala-compiler-tuning/","tags":["scala","compiler","sbt"],"title":"Scala Compiler Tuning"},{"categories":["Programming","Data Science"],"contents":"I am interested in NLP and have already some experience with Apache Solr. It\u0026rsquo;s time to dig a little in-deep regarding stemmers. First of all, I was looking for a general definition of what a stemmer is, and I found this one, which IMHO is quite good:\nstemmer — an algorithm for removing inflectional and derivational endings in order to reduce word forms to a common stem\nSo what a stemmer does is nothing more, than converting words to their word stem. For example, the three words developing, developer, development will be converted to develop. Therefore, stemmers are often used as filters.\nThis can be very handy in different situaltions e.g. when writing to a fulltext search index like SOLR or Elasticsearch. There are plenty of different stemming algorithms out there. To use them in a project, some different things have to be concerned:\nLanguage Stemming is based on common patterns, so it works a bit different in English than e.g. in German. Some stemmers support a variety of languages, some are only available in English. I would not recommend to use a stemmer in another language than your content is, because it maybe works, but only maybe.\nHere is a list of different stemmers which can be used in Apache SOLR, including supported languages.\nTime consumed As with every algorithm, there are faster and slower ones. Depending on where they are used, performance could have a huge impact on success. Generally said: Slower does not necessarily mean more precise.\nAgressiveness Because a stemmer does not really \u0026ldquo;understand\u0026rdquo; the language of the content which it\u0026rsquo;s processing, it all depends on the patterns which are applied. The PorterStemmer for example removes word endings like \u0026ldquo;e\u0026rdquo;, \u0026ldquo;er\u0026rdquo; and \u0026ldquo;ing\u0026rdquo;. Therefore, the following conversion will be made:\nhorse, horses \u0026gt; hors\ndeveloment, developer, developing \u0026gt; develop\nDepending on the task to be done, this can be great or totally disfunctional. I would recommend to try out different stemming algorithms whith some edge-cases of specific domain and evaluating the result. For many stemmers, there is good documentation describing the agressiveness of the algorithm.\nDifferent stemmers Porter (English) Porter 2 (English) Snowball (Multi Language) KStem (English, less agressive then porter) Usage in Java For a recent project, I used some of the SOLR / Lucene filters in Java. Just a short example how they can be used:\npublic class EnglishTokenizer implements TokenizerInterface { @Override public Collection\u0026lt;String\u0026gt; tokenize(String content) throws TokenizerException { try { // read content StringReader inputText = new StringReader(content); Map\u0026lt;String, String\u0026gt; tkargs = new HashMap\u0026lt;String, String\u0026gt;(); tkargs.put(\u0026#34;luceneMatchVersion\u0026#34;, \u0026#34;LUCENE_51\u0026#34;); // char filter (html) CharFilterFactory hcff = new HTMLStripCharFilterFactory(tkargs); Reader strippedInput = hcff.create(inputText); // tokenizer TokenizerFactory tkf = new StandardTokenizerFactory(tkargs); Tokenizer tkz = tkf.create(); tkz.setReader(inputText); // stopwords filter Map\u0026lt;String, String\u0026gt; stfargs = new HashMap\u0026lt;String, String\u0026gt;(); stfargs.put(\u0026#34;luceneMatchVersion\u0026#34;, \u0026#34;LUCENE_51\u0026#34;); stfargs.put(\u0026#34;words\u0026#34;, \u0026#34;lucene/en/stopwords.txt\u0026#34;); stfargs.put(\u0026#34;ignoreCase\u0026#34;, \u0026#34;true\u0026#34;); StopFilterFactory stff = new StopFilterFactory(stfargs); stff.inform(new ClasspathResourceLoader()); TokenStream stfts = stff.create(tkz); // K stem filter Map\u0026lt;String, String\u0026gt; ksffparam = new HashMap\u0026lt;String, String\u0026gt;(); KStemFilterFactory ksff = new KStemFilterFactory(ksffparam); TokenStream ksts = ksff.create(stfts); // synonyms filter Map\u0026lt;String, String\u0026gt; syffargs = new HashMap\u0026lt;String, String\u0026gt;(); syffargs.put(\u0026#34;luceneMatchVersion\u0026#34;, \u0026#34;LUCENE_51\u0026#34;); syffargs.put(\u0026#34;synonyms\u0026#34;, \u0026#34;lucene/en/synonyms.txt\u0026#34;); syffargs.put(\u0026#34;ignoreCase\u0026#34;, \u0026#34;true\u0026#34;); syffargs.put(\u0026#34;expand\u0026#34;, \u0026#34;false\u0026#34;); SynonymFilterFactory syff = new SynonymFilterFactory(syffargs); syff.inform(new ClasspathResourceLoader()); TokenStream syfts = syff.create(ksts); // lower case filter LowerCaseFilterFactory lcf = new LowerCaseFilterFactory(tkargs); TokenStream ts = lcf.create(syfts); // process token stream ts.reset(); CharTermAttribute termAttrib = (CharTermAttribute) ts.getAttribute(CharTermAttribute.class); Collection\u0026lt;String\u0026gt; tokens = new ArrayList\u0026lt;String\u0026gt;(); while (ts.incrementToken()) { tokens.add(termAttrib.toString()); } ts.end(); ts.close(); return tokens; } catch (IOException e) { throw new TokenizerException(e); } } } In the above example, a set of filters is applied to a string to tokenize, filter (and stem) words. For stemming, the KStem filter is used. The filters are all from the package org.apache.solr:solr-core:5.2.1 which is available on the maven repository.\nTokeinzer Example Content\nJava Developer - Zurich - financial markets - Salary negotiable depending on experience. A number of exciting Java opportunities exist to join a highly successful and growing provider\u0026hellip;\nResult (Tokens)\njava, development, zurich, financial, market, salary, negotiable, depend, experience, number, exciting, java, opportunity, exist, join, highly, successful, grow, provider\nSources / More Information lexicalresearch.com Apache SOLR Wiki Snowball Project ","date":"23 Jul, 2015","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cpicture\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_545x0_resize_q95_h2_box.webp\" media=\"(max-width: 575px)\"\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_600x0_resize_q95_h2_box.webp\" media=\"(max-width: 767px)\"\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_700x0_resize_q95_h2_box.webp\" media=\"(max-width: 991px)\"\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_1110x0_resize_q95_h2_box.webp\"\u003e\n  \u003cimg loading=\"lazy\" decoding=\"async\" class=\"w-100 img-fluid rounded\" src=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_1110x0_resize_q95_box.jpg\" alt=\"\" width=\"970\" height=\"500\"\u003e\n\u003c/picture\u003e\n \n \n \n\n","permalink":"https://www.frankneff.com/blog/2015-07-23-understanding-stemmers-nlp/","tags":["java","nlp","solr"],"title":"Understanding Stemmers (Natural Language Processing)"},{"categories":["Business","Engineering Teams"],"contents":"The word \u0026ldquo;pragmatism\u0026rdquo; or \u0026ldquo;pragmatic\u0026rdquo; is, in my personal opinion, the most overrated word in agile development. Many people use this as a buzzword without knowing what it means. I hear people saying \u0026ldquo;He solved that complex problem in half an hour, he\u0026rsquo;s so pragmatic!\u0026rdquo; and think for myself \u0026ldquo;Yeah, but that \u0026lsquo;solution\u0026rsquo; probably causes other devs three times more effort than a sustainable solution would take.\u0026rdquo;\nOkay, but that\u0026rsquo;s only my anger speaking. Let\u0026rsquo;s read a definition of pragmatism:\na reasonable and logical way of doing things or of thinking about problems that is based on dealing with specific situations instead of on ideas and theories – merriam-webster.com\nA Reasonable and Logical Way So even pragmatic solutions have to be reasonable and logical. I would ask so many people out there: \u0026ldquo;Is missing out documentation, tests and software design principles really a logical and resonable way of solving problems?\u0026rdquo; At least I don\u0026rsquo;t think so. Maybe if it\u0026rsquo;s only for a Executive Board presentation, you can rapidly build a prototype without having documentation or tests. But doing that, one has to take care that this prototype is not going life two weeks later.\nBased on Dealing with Specific Situations Of course, if there is a disaster case, you cannot think about the best way to build a solution for 2 days. What I am talking about are estimated, scheduled projects which are barely \u0026ldquo;fucked up\u0026rdquo; technically, because one wants to finish them fast or without thinking about it. In a second, or maybe third release, technical dept is appearing but because you have not documented nor tested, you cannot refactor. This is not pragmatism!\nFor specific situations or problems in development, there are often provided patterns or parts of solutions. Using those \u0026ldquo;best practices\u0026rdquo; is probably the quintessential of pragmatism. Building an over-simplified custom solution, because one doesn\u0026rsquo;t understand the best practice, is not.\nInstead of on Ideas and Theories There are many theoretical approaches in development. Let\u0026rsquo;s take the Enterprise Design/Architecture Patterns (Gang of Four) as an example. There were some people telling me, that they don\u0026rsquo;t use them, because this is theoretic and has nothing to do with pragmatic solutions. But if a \u0026ldquo;pragmatic solution\u0026rdquo; is the best way to deal with a specific situation, then I would highly recommend those patterns because the are very pragmatic.\nFinishing\u0026hellip; Many people use words like \u0026ldquo;pragmatism\u0026rdquo; or \u0026ldquo;best practice\u0026rdquo; as buzzwords but don\u0026rsquo;t understand what they mean. Therefore, please be aware that pragmatism does not mean laziness or oversimplifying a complex problem. It means thinking practical, but also logical and resonable, so don\u0026rsquo;t misuse them.\n","date":"21 Apr, 2015","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cpicture\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_545x0_resize_q95_h2_box.webp\" media=\"(max-width: 575px)\"\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_600x0_resize_q95_h2_box.webp\" media=\"(max-width: 767px)\"\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_700x0_resize_q95_h2_box.webp\" media=\"(max-width: 991px)\"\u003e\n  \u003csource srcset=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_1110x0_resize_q95_h2_box.webp\"\u003e\n  \u003cimg loading=\"lazy\" decoding=\"async\" class=\"w-100 img-fluid rounded\" src=\"/images/post/legacy-blog-article-without-images_hu7987a50157926afb108f2fcbd5b88db9_12370_1110x0_resize_q95_box.jpg\" alt=\"\" width=\"970\" height=\"500\"\u003e\n\u003c/picture\u003e\n \n \n \n\n","permalink":"https://www.frankneff.com/blog/2015-04-21-pragmatism-technical-dept-oversimplification/","tags":["agile","pragmatism"],"title":"If pragmatism raises technical debt, call it oversimplification (rant)"}]