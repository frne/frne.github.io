<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>authorization on FrankNeff.com - Technology meets Leadership</title>
    <link>https://www.frankneff.com/tags/authorization/</link>
    <description>Recent content in authorization on FrankNeff.com - Technology meets Leadership</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 11 Sep 2023 11:10:00 +0200</lastBuildDate><atom:link href="https://www.frankneff.com/tags/authorization/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Securing closed systems: Caveats of using plain OAUTH flows and how to solve them</title>
      <link>https://www.frankneff.com/blog/2023-09-11-securing-closed-systems-caveats-of-plain-oauth-flows-how-to-solve/</link>
      <pubDate>Mon, 11 Sep 2023 11:10:00 +0200</pubDate>
      
      <guid>https://www.frankneff.com/blog/2023-09-11-securing-closed-systems-caveats-of-plain-oauth-flows-how-to-solve/</guid>
      <description>&lt;p&gt;While OIDC and OAUTH are well-known standards, they don&amp;rsquo;t fit every purpose &amp;ldquo;out of the box.&amp;rdquo; In businesses with &lt;strong&gt;special
regulations&lt;/strong&gt; like banking, health care, etc., non-functional requirements to auth can be challenging. Different
solutions and ways were evaluated to create a new identity provider for a medical network. The first approach was &amp;ldquo;just&amp;rdquo;
using simple &lt;strong&gt;OAUTH&lt;/strong&gt; by its most famous &lt;strong&gt;Authorization Code Flow&lt;/strong&gt;. Of course, it failed fast, and I&amp;rsquo;ll show why and
how we solved it in this post.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
