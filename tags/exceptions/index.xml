<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exceptions on Franks.codes</title>
    <link>https://www.franks.codes/tags/exceptions/</link>
    <description>Recent content in Exceptions on Franks.codes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Sep 2017 19:57:00 +0100</lastBuildDate>
    
	<atom:link href="https://www.franks.codes/tags/exceptions/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Overcoming Checked Exceptions in Java Lambdas</title>
      <link>https://www.franks.codes/post/2017-09-06-overcoming-checked-exceptions-in-java-lambdas/</link>
      <pubDate>Wed, 06 Sep 2017 19:57:00 +0100</pubDate>
      
      <guid>https://www.franks.codes/post/2017-09-06-overcoming-checked-exceptions-in-java-lambdas/</guid>
      <description>In Java 8, the long awaited Lambda came to live, making it easy(-er) to do FP in Java. One problem I came across is, that most Java code throws checked exceptions which leads to IMHO ugly try/catch blocks in lambdas:
Function&amp;lt;A, B&amp;gt; fun = (a: A) -&amp;gt; { try { // some function call that trows checked exception$  return callFn(a); } catch (Exception e) { // return failure result  } }; The Good, the Bad and the Ugly A really simple, but also not really nice option is to wrap thrown exceptions into an unchecked one:</description>
    </item>
    
  </channel>
</rss>